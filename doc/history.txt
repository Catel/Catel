Catel history
=============

(+) Added
(*) Changed
(-) Removed
(x) Error / bug (fix)

For more information about issues or new feature requests, please visit:

Project website: http://www.catelproject.com
Issue tracker:   http://www.catelproject.com/support/issue-tracker
Documentation:   http://www.catelproject.com/support/documentation
License:         http://www.catelproject.com/about/license

Items prepended with CTL are from JIRA (old issue tracker). Items prepended with a # are from GitHub.

**********************************************************

==================
Version 5.1.0
==================

Added/fixed:
============
(+) #749     Add support for CallerMemberName in order to simplify INotifyPropertyChanged implementation
(*) #953     Cache ToString, ToUpper() and ToLower() calls
(*) #1017    Improve performance of ViewToViewModelMappingHelper

Roadmap:
========
See http://www.catelproject.com/support/issue-tracker

Known issues:
=============
See http://www.catelproject.com/support/issue-tracker

**********************************************************

==================
Version 5.0.0
==================

For an upgrade guide, visit http://docs.catelproject.com/vnext/setup-deployment/update-guides/

Release date:
=============
2017/xx/xx

Platform support changes:
=========================
-

Classes / members marked as obsolete:
=====================================
-

Added/fixed:
============
...

Roadmap:
========
See http://www.catelproject.com/support/issue-tracker

Known issues:
=============
See http://www.catelproject.com/support/issue-tracker

**********************************************************

==================
Version 5.0.0
==================

For an upgrade guide, visit http://docs.catelproject.com/vnext/setup-deployment/update-guides/

Release date:
=============
2017/07/26

Platform support changes:
=========================
Added support for the following platforms:
* .NET 4.7

Removed support for the following platforms:
* .NET 4.0
* Silverlight 5
* Windows Phone 8.0 (Silverlight)
* Windows Phone 8.1 (Silverlight)
* Windows Phone 8.1 (Runtime)
* Windows 8.1 (Runtime)

Removed support for the following components:
* Catel.Extensions.CSLA
* Catel.Extensions.Controls (moved to Orc.Controls & Orchestra)
* Catel.Extensions.Data
* Catel.Extensions.DynamicObjects (moved to Orc.DynamicObjects)
* Catel.Extensions.EntityFramework (moved to Orc.EntityFramework)
* Catel.Extensions.FluentValidation (moved to Orc.FluentValidation)
* Catel.Extensions.Interception
* Catel.Extensions.Memento (moved to Orc.Memento)
* Catel.Extensions.MVC4
* Catel.Extensions.MVC5
* Catel.Extensions.Prism4
* Catel.Extensions.Prism5 (moved to Orc.Prism)
* Catel.Extensions.Prism6 (moved to Orc.Prism)
* Catel.Extensions.Wcf.Server

Classes / members marked as obsolete:
=====================================
Our mission is to make Catel easier to maintain in the future. One way to achieve this is to remove unused
features and components. We are actively removing features by marking them obsolete. If nobody complains,
we will remove the features in the next major release.

-

Added/fixed:
============
(+) CTL-902  Allow custom management of serializer modifiers in the ISerializerManager
(+) CTL-907  Support classes that implement Parse(string, IFormatProvider) and ToString(IFormatProvider) in the serializers 
(+) CTL-929  Add Additional {WorkDir} as FileLogListener Keyword
(+) CTL-953  Create pool manager to re-use objects in a pool (e.g. memory streams in serialization)
(+) CTL-998  JSON Serializer cannot serialize with formatted indents
(+) CTL-1011 Implement IUIVisualizerService for UWP and removed non-async methods for WPF
(+) CTL-1015 Implement IOpenFileService for UWP and make all methods async (also for WPF)
(+) CTL-1016 Implement ISelectDirectoryService for UWP and make all methods async (also for WPF)
(+) CTL-1017 Implement ISaveFileService for UWP and make all methods async (also for WPF)
(+) #603     Add overloads for logging
(+) #912     Add focusFirstControl argument to DataWindow constructor
(+) #1044    Add SupportValidation to ModelAttribute to disable model validation mapping
(*) CTL-903  Only support Frame and not NavigationWindow for WPF navigation
(*) CTL-904  Allow view models to be created on multiple threads (thread-safe view model factory)
(*) CTL-905  Always log Argument logging (even when Catel logging is being ignored)
(*) CTL-911  Refactor UrlHelper to extension methods
(*) CTL-919  Replace parameters in ServiceLocator.ResolveTypeFromKnownContainer by ServiceInfo
(*) CTL-921  TypeFactory optimizations for multi-thread usage
(*) CTL-922  Don't cache RootFrame in NavigationService to allow dynamic navigation frames
(*) CTL-941  Update to json.net 9.x
(*) CTL-948  Allow setting the status in IPleaseWaitServiceExtensions.PushInScope
(*) CTL-988  Allow view models without model injection to stay alive on DataContext changes
(*) #123     Command CanExecute listeners are referenced with weak references
(*) #135     Use NuGet dependency for System.Windows.Interactivity instead
(*) #807     Exceptions in TaskCommand are now longer swallowed by default. Pre 5.0 behavior can be mimmicked by setting
             the TaskCommand.SwallowExceptions property to true
(*) #853     Improve Mixed mode in FastObservableCollection and FastBindingList
(*) #901     Clean up FrameworkElement and DependencyObject extension methods
(*) #988     Set default value of DeferValidationUntilFirstSaveCall to true
(*) #995     Split ModelBase into ModelBase (without validation) and ValidatableModelBase
(*) #998     Remove Catel.Services.Models namespace, use Catel.Services instead
(*) #1003    Migrate xaml uri from catel.codeplex.com => catelproject.com
(*) #1021    Add parameter to create an overload for GetSlug to not make the value lowercase 
(*) #1029    Check for existing values and only raise changed event in ConfigurationService
(*) #1045    Clean up IViewModel interface (remove HasDirtyModel, ViewModelConstructionTime & ValidateViewModel)
(*) #1046    Remove IsInitializing & IsInitialized from ModelBase so it can be used by ViewModelBase
(*) #1050    Replace ISavableModel.SerializationMode with ISerializer and remove some overloads
(*) #1052    Move property value change notifications wrappers (for child objects & collections) from ModelBase 
             to ChildAwareModelBase 
(*) #986     Replace (Validatable0ModelBase.SuspendValidation by SuspendValidations method 
(*) #1062    Add ValidationContext.Add() methods and mark AddFieldValidationResult and AddBusinessRuleValidationResult 
             as obsolete 
(*) #1067    WeakEventListener now supports Action delegates (even the ones on a DisplayClass instance)
(*)          Improve ShowWindowAsync implementation at UIVisualizerService
(x) #815     MessageMediator registers new recipients after previous registration of same type of recipient were 
             garbage collected
(x) CTL-899  Navigation in WPF is not working when using custom frame
(x) CTL-906  Clear current navigation context when (re)navigating to the same view in WPF
(x) CTL-910  Introduce special lock for null keys in CacheStorage to prevent ArgumentNullException
(x) CTL-925  LanguageBinding markup now uses weak events to allow specific controls (such as the ComboBox with ComboBoxItem 
             elements) to be updated after they have been collapsed
(x) CTL-991  Equals method in ServiceLocator.ServiceInfo class returns false positives
(x) CTL-1000 NumericTextBox behavior doesn't allow some values (e.g. 2.05)
(x) CTL-1010 MessageMediator.Unregister has a bug when method names are the same
(x) #950     TaskCommand binding to IsExecuting does not reflect the right state when using the Executing event
(x) #1006    TypeFactory does not respect scope when checking whether types can be resolved 
(x) #1038    Stack overflow when ViewModel class also implements ISavableModel
(x) #1071    Mono 5.0.x, stops Catel.Core (TypeCache) from working
(x) #1073    Serialization of generics fails for XmlSerializer (The '`' character, hexadecimal value 0x60, cannot be 
             included in a name)
(-) CTL-935  Remove InterestedIn attributes because services are a better way to communicate 
(-) CTL-975  Remove EventHandlerExtensions.SplitInvoke and use regular event invocation
(-) CTL-987  Delete MVVM logic behaviors (should only be available as logic)
(-) #129     Remove MediaElementThreadInfo since it was only used by PleaseWaitHelper 
(-) #131     Remove ISplashScreenService
(-) #776     Remove implementation of ModelBase.Equals and ModelBase.GetHashCode to improve out-of-the-box performance of
             the ModelBase. To implement comparison, one has to override it manually or derive from ComparableModelBase
(-) #916     Remove IXmlSerializer.OptimalizationMode in favor of ISerializationConfiguration.OptimalizationMode
(-) #974     Remove DynamicEventListener in favor of WeakEventListener
(-) #983     Remove INotifyPropertyChanging and only support INotifyPropertyChanged
(-) #1010    Remove PleaseWaitHelper and use busy indicator instead 
(-) #1016    Remove CountCollapsedConverter since we already have CollectionToVisibilityConverter
(-) #1030    Remove CommandLineHelper in favor of Orc.CommandLine
(-) #1031    Remove EffectsHelper & VisualTargetPresentationSource
(-) #1032    Remove TransferStylesAndTransitions - use special wrapper grid name instead
(-) #1043    Remove validation summaries in the view model
(-) #1047    Remove ViewModelBase.HasDirtyModels
(-) #1051    Remove IParent interface & Parent / Children elements from ModelBase
(-) #1059    Remove ISerializable.Serialized & ISerializable.Deserialized events
(-) #1060    Remove ModelBase.LeanAndMean (models should be lean by design now)
(-) Remove test implementations of services

Roadmap:
========
See http://www.catelproject.com/support/issue-tracker

Known issues:
=============
See http://www.catelproject.com/support/issue-tracker

**********************************************************

==================
Version 4.5.4
==================

For an update guide, visit https://catelproject.atlassian.net/wiki/display/CTL/Update+guides

Release date:
=============
2016/11/29

Added/fixed (BREAKING CHANGES):
===============================
No breaking changes, but made a lot of preparations for the "async big bang" that will happen in Catel 5.0. We are
currently trying to index all members that might need async members in the future. Most of these members are now
marked as obsolete and have an async handler which must be used in the future.

Platform support changes:
=========================
[none]

Classes / members marked as obsolete:
=====================================
Our mission is to make Catel easier to maintain in the future. One way to achieve this is to remove unused
features and components. We are actively removing features by marking them obsolete. If nobody complains,
we will remove the features in the next major release.

* CTL-671 Marked Catel.Extensions.CSLA as obsolete to minimize maintenance costs of Catel
* CTL-672 Marked Catel.Extensions.Wcf.Server as obsolete to minimize maintenance costs of Catel
* CTL-740 Marked IMessageMediator.SendMessageAsync as obsolete because it's not truly async
* CTL-755 Marked Catel.Windows.Controls.ScrollViewerProperties as obsolete to minimize maintenance costs of Catel
* CTL-756 Marked Catel.Windows.Controls.RichToolTip as obsolete to minimize maintenance costs of Catel
* CTL-784 Marked AttributeHelper as obsolete, use reflection extensions instead
* CTL-808 Marked AsynchronousCommand as obsolete, use TaskCommand instead
* CTL-810 Marked QueryableExtensions.Include(Expression) as obsolete for EF6 and higher, use the default EF implementation
* CTL-849 Marked ExpressionUtil obsolete, use ExpressionHelper instead
* CTL-935 Marked InterestedIn attribute obsolete, use services instead to communicate between view models

Added/fixed:
============
(+) CTL-932 Support custom serialization of models via special interfaces
(+) CTL-934 Support Bson (and more) in Json serializer via JsonSerializationConfiguration
(+) CTL-937 Support XmlSerializationOptimalization per model via XmlSerializationConfiguration
(+) CTL-946 Add ILockable interface to allow external locking on some objects
(+) CTL-977 Add intelligent ModelBase.SuspendChangeNotifications (to avoid String.Empty)
(+) CTL-978 Add ModelBase.SuspendChangeCallbacks to temporarily disable calls to catel property change callbacks 
(+) CTL-984 Add ModelBase.SuspendValidations to temporarily suspend validations
(*) CTL-947 Decrease memory footprint of TypeCache
(*) CTL-950 Improve performance of DateTime.Now by calculating manually
(x) CTL-933 Use culture from parent json reader in subreaders for json serialization
(x) CTL-931 TaskHelper.Run(async () => { }) has unexpected result and returns Task<Task> instead of Task

Roadmap:
========
See http://www.catelproject.com/support/issue-tracker

Known issues:
=============
See http://www.catelproject.com/support/issue-tracker

**********************************************************

==================
Version 4.5.3
==================

For an update guide, visit https://catelproject.atlassian.net/wiki/display/CTL/Update+guides

Release date:
=============
2016/09/01

Added/fixed (BREAKING CHANGES):
===============================
No breaking changes, but made a lot of preparations for the "async big bang" that will happen in Catel 5.0. We are
currently trying to index all members that might need async members in the future. Most of these members are now
marked as obsolete and have an async handler which must be used in the future.

Platform support changes:
=========================
[none]

Classes / members marked as obsolete:
=====================================
Our mission is to make Catel easier to maintain in the future. One way to achieve this is to remove unused
features and components. We are actively removing features by marking them obsolete. If nobody complains,
we will remove the features in the next major release.

* CTL-671 Marked Catel.Extensions.CSLA as obsolete to minimize maintenance costs of Catel
* CTL-672 Marked Catel.Extensions.Wcf.Server as obsolete to minimize maintenance costs of Catel
* CTL-740 Marked IMessageMediator.SendMessageAsync as obsolete because it's not truly async
* CTL-755 Marked Catel.Windows.Controls.ScrollViewerProperties as obsolete to minimize maintenance costs of Catel
* CTL-756 Marked Catel.Windows.Controls.RichToolTip as obsolete to minimize maintenance costs of Catel
* CTL-784 Marked AttributeHelper as obsolete, use reflection extensions instead
* CTL-808 Marked AsynchronousCommand as obsolete, use TaskCommand instead
* CTL-810 Marked QueryableExtensions.Include(Expression) as obsolete for EF6 and higher, use the default EF implementation
* CTL-849 Marked ExpressionUtil obsolete, use ExpressionHelper instead

Added/fixed:
============
(+) CTL-915 Add ISerializationConfiguration to all serialization methods. The serialization of members using 
    ToString / Parse has been changed to opt-in. This can either be achieved via a SerializerModifier or by 
    decorating the member using the SerializeUsingParseAndToStringAttribute
(x) CTL-917 Improve ChangeNotificationWrapper handling of NotifyCollectionChangedAction.Reset

Roadmap:
========
See http://www.catelproject.com/support/issue-tracker

Known issues:
=============
See http://www.catelproject.com/support/issue-tracker

**********************************************************

==================
Version 4.5.2
==================

For an update guide, visit https://catelproject.atlassian.net/wiki/display/CTL/Update+guides

Release date:
=============
2016/07/29

Added/fixed (BREAKING CHANGES):
===============================
No breaking changes, but made a lot of preparations for the "async big bang" that will happen in Catel 5.0. We are
currently trying to index all members that might need async members in the future. Most of these members are now
marked as obsolete and have an async handler which must be used in the future.

Platform support changes:
=========================
[none]

Classes / members marked as obsolete:
=====================================
Our mission is to make Catel easier to maintain in the future. One way to achieve this is to remove unused
features and components. We are actively removing features by marking them obsolete. If nobody complains,
we will remove the features in the next major release.

* CTL-671 Marked Catel.Extensions.CSLA as obsolete to minimize maintenance costs of Catel
* CTL-672 Marked Catel.Extensions.Wcf.Server as obsolete to minimize maintenance costs of Catel
* CTL-740 Marked IMessageMediator.SendMessageAsync as obsolete because it's not truly async
* CTL-755 Marked Catel.Windows.Controls.ScrollViewerProperties as obsolete to minimize maintenance costs of Catel
* CTL-756 Marked Catel.Windows.Controls.RichToolTip as obsolete to minimize maintenance costs of Catel
* CTL-784 Marked AttributeHelper as obsolete, use reflection extensions instead
* CTL-808 Marked AsynchronousCommand as obsolete, use TaskCommand instead
* CTL-810 Marked QueryableExtensions.Include(Expression) as obsolete for EF6 and higher, use the default EF implementation
* CTL-849 Marked ExpressionUtil obsolete, use ExpressionHelper instead

Added/fixed:
============
(+) CTL-907 Support classes that implement Parse(string, IFormatProvider) and ToString(IFormatProvider) in the serializers 
(x) CTL-906 Clear current navigation context when (re)navigating to the same view in WPF

Roadmap:
========
See http://www.catelproject.com/support/issue-tracker

Known issues:
=============
See http://www.catelproject.com/support/issue-tracker

**********************************************************

==================
Version 4.5.1
==================

For an upgrade guide, visit https://catelproject.atlassian.net/wiki/display/CTL/Update+guides

Release date:
=============
2016/07/22

Added/fixed (BREAKING CHANGES):
===============================
No breaking changes, but made a lot of preparations for the "async big bang" that will happen in Catel 5.0. We are
currently trying to index all members that might need async members in the future. Most of these members are now
marked as obsolete and have an async handler which must be used in the future.

Platform support changes:
=========================
[none]

Classes / members marked as obsolete:
=====================================
Our mission is to make Catel easier to maintain in the future. One way to achieve this is to remove unused
features and components. We are actively removing features by marking them obsolete. If nobody complains,
we will remove the features in the next major release.

* CTL-671 Marked Catel.Extensions.CSLA as obsolete to minimize maintenance costs of Catel
* CTL-672 Marked Catel.Extensions.Wcf.Server as obsolete to minimize maintenance costs of Catel
* CTL-740 Marked IMessageMediator.SendMessageAsync as obsolete because it's not truly async
* CTL-755 Marked Catel.Windows.Controls.ScrollViewerProperties as obsolete to minimize maintenance costs of Catel
* CTL-756 Marked Catel.Windows.Controls.RichToolTip as obsolete to minimize maintenance costs of Catel
* CTL-784 Marked AttributeHelper as obsolete, use reflection extensions instead
* CTL-808 Marked AsynchronousCommand as obsolete, use TaskCommand instead
* CTL-810 Marked QueryableExtensions.Include(Expression) as obsolete for EF6 and higher, use the default EF implementation
* CTL-849 Marked ExpressionUtil obsolete, use ExpressionHelper instead

Added/fixed:
============
(+) CTL-902 Allow custom management of serializer modifiers in the ISerializerManager
(*) CTL-903 Only support Frame and not NavigationWindow for WPF navigation
(x) CTL-899 Navigation in WPF is not working when using custom frame

Roadmap:
========
See http://www.catelproject.com/support/issue-tracker

Known issues:
=============
See http://www.catelproject.com/support/issue-tracker

**********************************************************

==================
Version 4.5.0
==================

For an update guide, visit https://catelproject.atlassian.net/wiki/display/CTL/Update+guides

Release date:
=============
2016/07/01

Added/fixed (BREAKING CHANGES):
===============================
No breaking changes, but made a lot of preparations for the "async big bang" that will happen in Catel 5.0. We are
currently trying to index all members that might need async members in the future. Most of these members are now
marked as obsolete and have an async handler which must be used in the future.

Platform support changes:
=========================
[none]

Classes / members marked as obsolete:
=====================================
Our mission is to make Catel easier to maintain in the future. One way to achieve this is to remove unused
features and components. We are actively removing features by marking them obsolete. If nobody complains,
we will remove the features in the next major release.

* CTL-671 Marked Catel.Extensions.CSLA as obsolete to minimize maintenance costs of Catel
* CTL-672 Marked Catel.Extensions.Wcf.Server as obsolete to minimize maintenance costs of Catel
* CTL-740 Marked IMessageMediator.SendMessageAsync as obsolete because it's not truly async
* CTL-755 Marked Catel.Windows.Controls.ScrollViewerProperties as obsolete to minimize maintenance costs of Catel
* CTL-756 Marked Catel.Windows.Controls.RichToolTip as obsolete to minimize maintenance costs of Catel
* CTL-784 Marked AttributeHelper as obsolete, use reflection extensions instead
* CTL-808 Marked AsynchronousCommand as obsolete, use TaskCommand instead
* CTL-810 Marked QueryableExtensions.Include(Expression) as obsolete for EF6 and higher, use the default EF implementation
* CTL-849 Marked ExpressionUtil obsolete, use ExpressionHelper instead

Added/fixed:
============
(+) CTL-622 Add check type sorting and expression filter on ExceptionService
(+) CTL-788 Added new LogEvent called Status which can be used for status updates
(+) CTL-796 Add Activate existing window methods in IUIVisualizerService
(+) CTL-803 Add RegisterHandler method on IExceptionService
(+) CTL-805 Add IExceptionHandler<T> to make implementation of custom exception handlers easier
(+) CTL-809 Add CreateTaskCommand method on CommandHelper
(+) CTL-817 Add DynamicObservableObject implementation
(+) CTL-832 Added ProgressContext to easily allow progress calculation
(+) CTL-745 Allow DataWindowButton to be bindable (both text and visibility)
(+) CTL-842 Add events to ICacheStorage when items are removed from the cache
(+) CTL-843 Add ToString implementation for ValidationContext and ValidationSummary
(+) CTL-844 Create Enum<TEnum>.Flags.GetValues(TEnum enum) to retrieve list of flags
(+) CTL-848 CacheStorage - automatically dispose item on removing
(+) CTL-861 Add tag overload to IViewModelFactory to allow resolving of dependencies using tags
(+) CTL-873 Allow ConfigurationService to store values in separate containers (local and roaming)
(+) CTL-883 Create magic "ViewModelContainer" name so you can define your own view model grid
(*) CTL-785 Support expressions in validation result static members so you can now write
    FieldValidationResult.CreateWarning(() => MyProperty, "This field is required");
(*) CTL-789 Improve property handling in the context of RegisterProperties
(*) CTL-792 Improve property editing performance
(*) CTL-794 Allow application-wide commands to be executed when child windows have a focus
(*) CTL-797 Only set owner window for modal dialogs in UIVisualizerService
(*) CTL-800 UpdatableMarkupExtension should expose IServiceProvider in the ProvideDynamicValue method
(*) CTL-802 Add async version of OnOkExecute to DataWindow
(*) CTL-806 Allow ValueConverterGroup to contain System.Windows.IValueConverter objects
(*) CTL-807 Support enum values in ConfigurationService (and StringToObjectHelper)
(*) CTL-810 Marked QueryableExtensions.Include(Expression) as obsolete for EF6 and higher
(*) CTL-814 Improve Argument.IsValid implementation to allow more options
(*) CTL-819 Prevent unnecessary creation of event args in .SafeInvoke when handler is null
(*) CTL-824 ModelBase.editableobject should check for duplicated BeginEdit(), EndEdit(), CancelEdit()
(*) CTL-825 Use NuGet package for behaviors SDK instead of local reference for UWP
(*) CTL-828 Prevent unneccessary creation of empty dictionary entries in ModelBase
(*) CTL-846 ObjectConverterService (and thus ConfigurationService) should respect culture on UWP
(*) CTL-850 Don't set AssociatedObject to null in IBehavior.Detach for UWP
(*) CTL-856 Improved FastObservableCollection to have concrete suspension modes for change notifications
(*) CTL-859 When resolving types from the service locator (for dependency injection), prefer registered 
    types with the right scope
(*) CTL-886 Support AsyncLock in CacheStorage so async retrieval is covered by locks as well
(*) CTL-895 Removing CurrentDispatcher property from IDispatcherService interface. Adding methods to IDispatcher 
    that ensures backward capability
(x) CTL-791 Types with the same FullName from different assemblies will cause issues with the TypeFactory cache
(x) CTL-793 CompositeCommand.CheckCanExecuteOfAllCommandsToDetermineCanExecuteForCompositeCommand not respected
(x) CTL-798 Prevent MissingResourceException when resolving strings for Catel.Core
(x) CTL-811 Fixed thread racing against IsLockAcquired property
(x) CTL-813 BehaviorBase - AssociatedObject.Unloaded can be called multiple times
(x) CTL-823 Enum<TEnum>.TryParse with case insensitive does not work
(x) CTL-839 Windows not exposing the Closed event (such as MahApps ContentDialog) don't close the view model
(x) CTL-877 TypeCache.InitializeTypes with force & assembly should only invalidate specified assembly
(x) CTL-878 Fix for FileLogListener causes UnauthorizedAccessException in web applications 
(x) CTL-880 Sometimes (very rarely) fails to set view model when switching views (loaded, unloaded, loaded) very fast
(x) CTL-887 GetString in LanguageService does not correctly resolve resources for non-neutral cultures in metro apps
(x) CTL-891 Prevent duplicate view model creation in nested user controls when the data context hasn't really changed
(x) CTL-892 Fixed NullReferenceException when using the GetErrorMessage() or GetWarningMessage() extension 
    methods for ModelBase
(x) CTL-893 ThemeHelper should not cache too aggressive, it could result in full refresh of all DataWindows each 
    time a new DataWindow is openened
(x) CTL-896 BehaviorBase could get into a negative loaded count prevent the next load event from being noticed

Roadmap:
========
See http://www.catelproject.com/support/issue-tracker

Known issues:
=============
See http://www.catelproject.com/support/issue-tracker

**********************************************************

==================
Version 4.4.0
==================

For an update guide, visit https://catelproject.atlassian.net/wiki/display/CTL/Update+guides

Release date:
=============
2015/11/27

Added/fixed (BREAKING CHANGES):
===============================
No breaking changes, but made a lot of preparations for the "async big bang" that will happen in Catel 5.0. We are
currently trying to index all members that might need async members in the future. Most of these members are now
marked as obsolete and have an async handler which must be used in the future.

Platform support changes:
=========================
[none]

Classes / members marked as obsolete:
=====================================
Our mission is to make Catel easier to maintain in the future. One way to achieve this is to remove unused
features and components. We are actively removing features by marking them obsolete. If nobody complains,
we will remove the features in the next major release.

* CTL-671 Marked Catel.Extensions.CSLA as obsolete to minimize maintenance costs of Catel
* CTL-672 Marked Catel.Extensions.Wcf.Server as obsolete to minimize maintenance costs of Catel
* CTL-740 Marked IMessageMediator.SendMessageAsync as obsolete because it's not truly async
* CTL-755 Marked Catel.Windows.Controls.ScrollViewerProperties as obsolete to minimize maintenance costs of Catel
* CTL-756 Marked Catel.Windows.Controls.RichToolTip as obsolete to minimize maintenance costs of Catel
* CTL-784 Marked AttributeHelper as obsolete, use reflection extensions instead

Added/fixed:
============
(+) CTL-742 Add support for Prism 6 (NET45 and NET46)
(+) CTL-751 Add DisplayNameAttribute that uses the ILanguageService by default
(+) CTL-762 Add SerializeAsCollection attribute to serialize a ModelBase as collection when it implements both 
    ModelBase and IList (otherwise it will default to serialize as model)
(+) CTL-766 Support visibility converters in Xamarin.Android
(+) CTL-776 Introduce Catel.Threading.Timer so it behaves the same on all platforms
(+) CTL-777 Create extension methods to log headers (e.g. log.DebugHeading1, etc)
(+) CTL-779 Add Russian resources to Catel.MVVM
(+) CTL-782 Add case insensitive overloads to all PropertyHelper methods
(+) CTL-783 Create GetAttribute extension methods for Type and MemberInfo
(+) CTL-786 Include generated resources.dll in the NuGet packages
(*) CTL-754 Turn DataAnnotation validation off when setting property value
(*) CTL-755 Marked Catel.Windows.Controls.ScrollViewerProperties as obsolete to minimize maintenance costs of Catel
(*) CTL-756 Marked Catel.Windows.Controls.RichToolTip as obsolete to minimize maintenance costs of Catel
(*) CTL-759 Allow ViewToViewModel to have the model property name missing when there is just 1 model
(*) CTL-763 Improve performance of serialization engine by caching some method results
(*) CTL-767 Use ILanguageService in UI elements (like DataWindow, InfoBarMessageControl, etc)
(*) CTL-778 Default to null instead of string.Empty when reading tags from IoC configuration
(*) CTL-784 Move AttributeHelper to reflection extensions
(x) CTL-740 TargetParameterCountException while sending message on RT projects (RT projects now support weak actions)
(x) CTL-744 Fixed missing DataWindowStyle when only referencing Catel.Extensions.Controls theme (it was no longer
    including the Catel.MVVM theme)
(x) CTL-753 Support serialization for ModelBase that also implements IList
(x) CTL-761 NumericTextBox does not support Key.Decimal entries
(x) CTL-780 Support untyped generics in IoC when registering them via attributes

Roadmap:
========
See http://www.catelproject.com/support/issue-tracker

Known issues:
=============
See http://www.catelproject.com/support/issue-tracker

**********************************************************

==================
Version 4.3.0
==================

For an update guide, visit https://catelproject.atlassian.net/wiki/display/CTL/Update+guides

Release date:
=============
2015/10/05

Added/fixed (BREAKING CHANGES):
===============================
No breaking changes, but made a lot of preparations for the "async big bang" that will happen in Catel 5.0. We are
currently trying to index all members that might need async members in the future. Most of these members are now
marked as obsolete and have an async handler which must be used in the future.

Platform support changes:
=========================
(*) CTL-724 Created separate projects for Universal App Platform projects (UAP 10.0)
(*) CTL-741 Support .NET 4.6 for Prism 5

Classes marked as obsolete:
===========================
Our mission is to make Catel easier to maintain in the future. One way to achieve this is to remove unused
features and components. We are actively removing features by marking them obsolete. If nobody complains,
we will remove the features in the next major release.

(*) CTL-671 Marked Catel.Extensions.CSLA as obsolete
(*) CTL-672 Marked Catel.Extensions.Wcf.Server as obsolete

Added/fixed:
============
(+) CTL-718 Add LogMessage event to RollingInMemoryService
(+) CTL-727 Created ExceptionFactory and convert all throw new exception calls
(+) CTL-732 Add DeviceHelper so it's easy to determine on what kind of device the code is being executed
(+) CTL-730 Support array deserialization in all serializers (Xml, Binary, Json)
(*) CTL-713 Improved designer support by automatically initializing all classes that derive from DesignTimeInitializer. 
    This way it's possible to have customized registrations at design time (for example switching languages at design 
    time, even when the code is using the ILanguageService and custom resx files)
(*) CTL-719 Don't store extra undo action for properties when validation errors are cleared in memento
(*) CTL-723 Add LogExtensions.ErrorAndCreateException to replace ErrorAndThrowException which returns an exception. The
    code must be changed to 'throw Log.ErrorAndCreateException<MyException>("my message");'
(*) CTL-724 Created separate projects for Universal App Platform projects (UAP 10.0)
(*) CTL-725 Update NuGet reference to 2.8.6
(*) CTL-726 Fallback to non-weak events when weak event subscription fails (required for UAP)
(*) CTL-729 Support .NET native in the WeakEventListener
(*) CTL-735 Support async canceling on closing event of DataWindow
(*) CTL-741 Support .NET 4.6 for Prism 5
(x) CTL-714 Serialize Model with only one property as XML attribute does not work
(x) CTL-720 NullReferenceException in ChangeNotificationWrapper
(x) CTL-721 AppDomainExtensions.PreloadAssemblies() throws exception on loading native dll
(x) CTL-731 ViewModelBase.CancelingAsync gets called twice on IViewModelExtensions.CancelAndCloseViewModelAsync

Roadmap:
========
See http://www.catelproject.com/support/issue-tracker

Known issues:
=============
See http://www.catelproject.com/support/issue-tracker

**********************************************************

==================
Version 4.2.0
==================

For an update guide, visit https://catelproject.atlassian.net/wiki/display/CTL/Update+guides

Release date:
=============
2015/09/01

Added/fixed (BREAKING CHANGES):
===============================
No breaking changes, but made a lot of preparations for the "async big bang" that will happen in Catel 5.0. We are
currently trying to index all members that might need async members in the future. Most of these members are now
marked as obsolete and have an async handler which must be used in the future.

Platform support changes:
=========================
(+) CTL-614 Support Windows 10 Universal App Project
(+) CTL-615 Support .NET 4.6
(+) CTL-684 Added PCL projects for Catel.Extensions.Data / Catel.Extensions.DynamicObjects / Catel.Extensions.Memento
(-) CTL-613 Removed Windows 8.0 projects (no longer supported in Visual Studio 2015). Upgrade your projects
    to 8.1 instead

Classes marked as obsolete:
===========================
Our mission is to make Catel easier to maintain in the future. One way to achieve this is to remove unused
features and components. We are actively removing features by marking them obsolete. If nobody complains,
we will remove the features in the next major release.

(*) CTL-671 Marked Catel.Extensions.CSLA as obsolete
(*) CTL-672 Marked Catel.Extensions.Wcf.Server as obsolete

Added/fixed:
============
(+) CTL-525 UnitOfWork should allow Refresh of Entities
(+) CTL-602 Added methods to ICompositeCommand to retrieve the actual commands and actions registered to it
(+) CTL-611 Added IPleaseWaitService.PushInScope extension method
(+) CTL-612 Allow custom log data in log entries by introducing the LogData class
(+) CTL-624 Add AsyncEventHandler and extension for safe invocation
(+) CTL-631 Create IStartupInfoProvider extension method to create a command line
(+) CTL-632 Support KeyValuePair in serialization engine with KeyValuePairSerializerModifier
(+) CTL-635 Support Json serialization. This is implemented in Catel.Serialization.Json and is fully compatible
    with all the Catel serialization features (such as serialization modifiers)
(+) CTL-642 Add Path.GetApplicationDataDirectoryForAllUsers which points to C:\ProgramData\
(+) CTL-644 Allow specification of the serializer to be used for backup scenarios on ModelBase
(+) CTL-649 Implement command containers for application-wide commands
(+) CTL-652 Create a CommandManagerWrapper so every window can support application-wide commands
(+) CTL-656 Added Async overloads in ViewModel to prepare for async and sync methods support in ViewModelBase in v5
(+) CTL-657 Create FocusOnKeyPress behavior to allow to set the focus when a specific KeyDown event occurs
(+) CTL-660 Allow AssemblyHelper.GetEntryAssembly with custom EntryAssembly resolver
(+) CTL-667 Support async in Entity Framework 6 extension for unit of work and repositories (NET 4.5+ only)
(+) CTL-675 Add EnumToCollapsingVisibilityConverter
(+) CTL-676 Support all objects in serialization engine
(+) CTL-681 Added support of Android's ISharedPreferences in ConfigurationService
(+) CTL-688 Support collections and dictionary as top level elements in serialization
(+) CTL-704 Add Async methods for dispatcher and IDispatcherService
(+) CTL-709 Add AsyncLock from AsyncEx library
(*) CTL-550 Non Serializable properties tagged with [IncludeInSerialization] should attempt to serialize and 
    complain if they are not serialized
(*) CTL-617 Marked TraceOutputControl as obsolete, will be removed in 5.0. Use LogViewerControl from the 
    Orc.Controls NuGet package instead
(*) CTL-618 Marked DropDownButton as obsolete, will be removed in 5.0. Use DropDownButton from the 
    Orc.Controls NuGet package instead
(*) CTL-619 Marked WatermarkTextBox as obsolete, will be removed in 5.0. Use WatermarkTextBox from the 
    Orc.Controls NuGet package instead
(*) CTL-619 Marked LinkLabel as obsolete, will be removed in 5.0. Use LinkLabel from the  Orc.Controls NuGet 
    package instead
(*) CTL-640 Convert iOS projects to new iOS project structure (remove classic API)
(*) CTL-643 Change async logging flush calls to sync and add async extensions. This means that all flushing will now be
    done on the same thread by default. To flush async, call FlushAsync(). The final signature change (breaking) will be
    applied to Catel v5
(*) CTL-687 ApplicationExtensions.GetActiveWindowForApplication should ignore created (but not yet visible) windows
(*) Updated Entity Framework to 6.1.3 for Entity Framework 6 extension
(*) Updated to FluentValidation 5.6.2
(*) Updated NuGet to 2.8.5 for Prism extension
(*) Updated AspNet.Mvc to 5.2.3 for Catel.MVC5
(*) CTL-645 Only invoke auditor methods when at least 1 auditor is registered
(*) CTL-648 Ensure ShowDialogAsync works the same (blocking) on all platforms
(*) CTL-670 Improve Argument class for range and guid checks when using expressions
(*) CTL-674 Allow control on IsDirty after a property has been changed
(*) CTL-679 Don't throw exceptions when converting a value in a ValueConverterBase fails
(*) CTL-691 UnitOfWork should use DbContext instead of ObjectContext to save changes
(*) CTL-692 Don't invoke command CanExecute when view model is canceling, saving or closing
(*) CTL-705 Pass DeferValidationUntilFirstSaveCall through nested view model tree automatically
(x) CTL-555 Non Catel models with GraphId are not correctly deserialized using XmlSerializer and JsonSerializer
(x) CTL-621 ManagedViewModel might throw exception when enumerating interested view models
(x) CTL-625 LogListeners are created twice when defined in config when using vshost
(x) CTL-626 EnvironmentHelper.IsProcessCurrentlyHostedByXXX functions are checking current instead parent (host) process
(x) CTL-627 ViewModel validation throws "property not found" errors
(x) CTL-630 Xml serialization problem on Xamarin project
(x) CTL-634 Model to ViewModel mappings don't work in explicit mode
(x) CTL-636 UpdatableMarkupExtension in DataTemplate is not updatable
(x) CTL-638 Triggers don't work when combined with Modifiers
(x) CTL-646 Prism and CompositeNuGetBasedModuleCatalog throw ModuleTypeLoaderNotFoundException
(x) CTL-650 ParallelHelper is not executing anything in parallel
(x) CTL-653 The type initializer for 'Catel.IoC.IoCFactory' threw an exception for types where FullName is empty
(x) CTL-654 CompositeCommand.UnregisterAction doesn't work when directly passing in a method
(x) CTL-658 LanguageService doesn't work for WinRT and resources inside the app itself
(x) CTL-659 AssemblyHelper.GetEntryAssembly fails with Dynamic Assemblies
(x) CTL-663 ViewModelManager sometimes throws KeyNotFoundException in multithreaded scenarios
(x) CTL-664 EventToCommand doesn't initially call CanExecute on a command to determine the initial state
(x) CTL-673 Fixed the naming registration convention which does not pick up some types
(x) CTL-703 TypeCache.GetTypesImplementingInterface is broken
(x) CTL-710 XmlAttribute on root elements inside collections is not being respected by the XmlSerializer. Also introduced
    XmlSerializerOptimalizationMode.PrettyXmlAgressive to remove all namespaces from an xml file

Roadmap:
========
See http://www.catelproject.com/support/issue-tracker

Known issues:
=============
See http://www.catelproject.com/support/issue-tracker

**********************************************************

==================
Version 4.1.0
==================

For an update guide, visit https://catelproject.atlassian.net/wiki/display/CTL/Update+guides

Release date:
=============
2015/03/14

Added/fixed (BREAKING CHANGES):
===============================
(*) CTL-610 IUIVisualizerService now has both sync and async methods. For < 4.0, this is a non-breaking change. 
    For 4.0 users, this is a breaking change. To keep using async, append Async (e.g. ShowDialogAsync) to the
    calls of the IUIVisualizerService

Added/fixed:
============
(+) CTL-427 Added Catel.Extensions.Prism5 with full support for Prism 5
(+) CTL-394 CacheStorage Constructor with IEqualityComparer parameter support for Dictionary
(+) CTL-545 Added IDataContextSubscriptionService to allow customization of DataContext subscriptions to
    be direct (element.DataContext only) or inherited
(+) CTL-556 Add support for SharpDevelop XAML visual designer
(+) CTL-554 Allow suspension of notifications in ConfigurationService
(+) CTL-564 Add DisposableToken class that makes it possible to easily suspend objects temporarily using
    an IDisposable token that can initalize / dispose the object automatically
(+) CTL-565 Add thread id to default FormatLogEvent in LogListenerBase
(+) CTL-571 Add ObjectConverterService to allow customization of conversions
(+) CTL-580 Add base class for disposable objects
(+) CTL-583 Enable TaskCommands and ProgressiveTaskCommands in SL and NET40
(+) CTL-591 Add more naming conventions to locators so views and view models can be located in same namespace
(+) CTL-597 Add ability to turn DataAnnotation validation off
(+) CTL-601 Add Additional methods on IExceptionService
(*) CTL-557 ServiceLocator should support IDisposable
(*) CTL-558 Use LayoutRounding and SnapToDevicePixels in DataWindow and UserControl to prevent 
    blurriness. Also available as extension method FrameworkElement.FixBlurriness()
(*) CTL-559 IoC ObjectExtensions DefaultDependencyResolver improvement
(*) CTL-560 Allow ICommand to be added to CompositeCommand
(*) CTL-579 Use Application.Shutdown instead of MainWindow.Close in NavigationService::CloseApplication
(*) CTL-608 Replace special characters such as spaces in configuration key values
(x) CTL-551 Memory leak with Behaviours caused by InteractivityManager. The InteractivityManager is
    now marked obsolete and will be removed in 5.0, logic has already been removed from the codebase
(x) CTL-561 Changing TraceOutputControl.SelectedLevel doesn't work
(x) CTL-562 DirectoryService.InitialDirectory doesn't work correctly
(x) CTL-563 InputGestures accepts key gesture with modifiers when Modifiers == ModifierKeys.None,
    now the check is strict and only works if all the modifiers match
(x) CTL-568 MessageBox in WPF does not set owner correctly when application is not activated
(x) CTL-573 Property injection with same type and different tag not working
(x) CTL-574 Possible deadlock when mapping properties from VM to M in multithreaded scenarios
(x) CTL-575 XmlSchemaHelper does not check for duplicate type entries
(x) CTL-578 CancelViewModel with model mappings allows corrupt model
(x) CTL-589 Nested user controls with same name might cause unhandled exception in Silverlight
(x) CTL-593 PleaseWaitService implementation missing from Silverlight
(x) CTL-594 ViewModelCommandManager might throw NullReferenceException for closed view models
(x) CTL-599 / CTL-600 Bugfixes in PleaseWaitService when using Push and Pop
(x) CTL-603 ViewModelCommandManager is null in very rare cases
(x) CTL-606 UpdateBindingBehaviorBase NullReferenceExcepton
(x) CTL-609 XmlSchemaHelper should recognize duplicate schema types

Roadmap:
========
See http://www.catelproject.com/support/issue-tracker

Known issues:
=============
See http://www.catelproject.com/support/issue-tracker

**********************************************************

==================
Version 4.0.0
==================

For an update guide, visit https://catelproject.atlassian.net/wiki/display/CTL/Update+guides

Release date:
=============
2014/11/17

Added/fixed (BREAKING CHANGES):
===============================
(+) CTL-354 Introduced UserControl.UnloadBehavior to specify the behavior which will be handled when the view is
    being unloaded or the data context changes. This defaults to SaveAndCloseViewModel. If other logic is required,
    make sure to set the value on the UserControl
(+) CTL-427 Added support for Prism5 in a new extension (Catel.Extensions.Prism5)
(*) CTL-309 Moved Catel.MVVM.Services to Catel.Services namespace so all services in all extensions will now be put
    into the same namespace
(*) CTL-328 Fully abstracted away the MVVM logic so they can be used in Xamarin as well. Therefore all view elements
    are now implemented as interfaces (mainly IView) and are now located in the Catel.MVVM.Views namespace. This might
    be a breaking change for people using the behaviors or implementing custom views
(*) CTL-344 Renamed Catel.Environment class to Catel.CatelEnvironment to prevent name clashing with .NET Environment
(*) CTL-402 DependencyResolver and ServiceLocator now throw TypeNotRegisteredException when a type is being retrieved
    that is not yet registered in the ServiceLocator
(*) CTL-428 Simplified navigation on all platforms. This means that Catel will no longer keep viewmodels in memory to
    provide a back stack. This is to make the navigation the same on all platforms. If there is a need to keep state,
    the developer will be responsible to implement that
(*) CTL-419 Changed license to MIT instead of Ms-PL
(*) CTL-444 Remove Activator.CreateInstance from TypeFactory (it will automatically determine what to use now)
(*) CTL-449 Convert all methods in the IMessageService to async so it works the same on all platforms. Note that this is
    a breaking change and users should use await or Task.ContinueWith to await the result
(*) CTL-451 Convert IUIVisualizerService to async implementation
(*) CTL-452 Make it simple to use Catel on 3rd party controls (major changes internally, but it is now much easier
    to use Catel on other views)
(*) CTL-461 Change default value of CompositeCommand.AllowPartialExecution to false
(*) CTL-483 UIVisualizerService improvements (moved some methods to extension methods)
(*) CTL-486 Add time to all log listeners. This is a breaking change for classes implementing ILogListener
(*) CTL-488 Convert IViewModel interface to support full async
(*) CTL-506 BatchLogListenerBase.WriteBatch is now async so it won't block any UI
(*) CTL-507 Use FastViewPropertySelector as default for major performance boost. This is a breaking change if the controls
    use the ViewToViewModel mappings. If so, register the ViewPropertySelector class at application startup to get old
    behavior
(*) CTL-515 Implement validation members explicitly on ModelBase so clean up most rarely used members
(-) CTL-454 Removed the RemoveInstance methods from the IServiceLocator interface. Use IServiceLocator.RemoveType instead
(-) CTL-458 Removed usage of ICloneable. If one wants to clone an object, simply serialize / deserialize it
(-) CTL-490 Remove parameters from BehaviorBase.OnAssociatedObjectLoaded. This is only a breaking change if there are 
    custom behaviors

Added/fixed:
============
(+) CTL-323 Introduced ApiCop feature which will aid developers with hints and tips
(+) CTL-333 Now NET40 also support the IExceptionService.ProcessAsync
(+) CTL-340 Added LogManager.IgnoreCatelLogging to apply the setting to all ILogListener instances at once
(+) CTL-290 Added UICompositionService for Prism extensions and also marked the Activate and Deactivate methods from 
    UIVisualizerServiceExtensions as obsolete
(+) CTL-352 Allow Action to be registered besides ICommand in the CommandManager
(+) CTL-353 Add generic overloads for UIVisualizerService.Show and ShowDialog
(+) CTL-358 Add support for XmlRoot in serialization routine
(+) CTL-360 Added design-time support for the LanguageBinding markup extension. This is built in a generic way to
    support any initialization code to be ran at design-time using Catel
(+) CTL-367 Add LogExtensions.LogProductInfo and LogExtensions.LogDeviceInfo
(+) CTL-372 IModelEditor interface which allows public SetValue / GetValue of ModelBase
(+) CTL-383 Added support for dependency injection of COM objects in the TypeFactory
(+) CTL-387 Added AutoComplete service and behavior to easily add auto completion to any TextBox
(+) CTL-388 Allow customization of assembly used for logging
(+) CTL-389 Added support for MVC 5 (5.1.1) and updated MVC 4 to 4.0.30506
(+) CTL-406 Added support for Windows Phone 8.1
(+) CTL-410 Add SingleUnloadOthers to TabControl so only a single view model lives in a tabcontrol
(+) CTL-436 Add generic ICatelCommand interfaces
(+) CTL-445 Support command parameters with application-wide commands
(+) CTL-446 Create InteractivityManager to allow events when behaviors are created
(+) CTL-459 Add AutoScroll behavior to automatically scroll ItemsControl lists
(+) CTL-469 Add async methods to the ICacheStorage 
(+) CTL-485 Create RollingInMemoryLogListener to be able to query the latest log messages
(+) CTL-489 Allow property unregistration via ModelBase.UnregisterProperty
(+) CTL-505 Allow to stamp LogEntries with date time
(+) CTL-508 Added the SeqLogListener
(+) CTL-509 Added the EventLogListener
(+) CTL-511 Add PlatformToBooleanConverter to know which platform is being used
(+) CTL-515 Add model initialization and uninitialization members availale in ViewModelBase
(+) CTL-552 Create catel:Window that derives from DataWindow with a customized features
(*) CTL-326 Data annotation validation will no longer be invoked for properties with non-public getters to prevent
    first chance exceptions the first time such a property is being validated
(*) CTL-334 ViewModelBase now respects SuspendValidation during saving, which means that even if there are validation 
    errors, the view model can be saved when SuspendValidation is set to true
(*) CTL-337 Allow UserControlLogic to be used on ContentControl in WPF
(*) CTL-342 DebugLogListener also writes to System.Diagnostics.Debug.WriteLine for Silverlight
(*) CTL-343 Improved logging performance by 10 % by small optimalizations
(*) CTL-348 CacheStorage now only enables the expiration timer when it actually contains items that can expire. The
   interval is now controllable as well, but still defaults to 1 second
(*) CTL-350 Improved performance of TypeCache, which should noticeable improve startup time (some up to 50 %)
(*) CTL-355 LanguageBindings do not refresh after changing PreferredCulture in ILanguageService
(*) CTL-356 ConverterHelper.DoNothingBindingValue now returns UnsetValue instead of DoNothing in NET40 and NET45 to make 
    sure it can use the FallbackValue
(*) CTL-359 Improve performance on DependencyObjectExtensions.FindLogicalOrVisualAncestor
(*) CTL-362 Cache result of GetSerializableMembers in SerializerBase
(*) CTL-363 Serialize ModelBase in SerializationManager even when IsSerializable is false
(*) CTL-365 Allow printing of views that are hidden without focus with ViewExportService
(*) CTL-370 Add colors to ConsoleLogListener
(*) CTL-374 SplashScreenService now uses the IExceptionService to handle exceptions so the behavior can be fully customized
(*) CTL-382 Improved the performance of StyleHelper by adding caching and disabling the recreateStylesBasedOnTheme option by
    default which decompiles BAML to XAML (which is expensive)
(*) CTL-390 Updated CSLA to 4.5.501
(*) CTL-391 Updated FluentValidation to 5.1.0
(*) CTL-392 Updated Entity Framework to 6.1.0
(*) CTL-393 Automatically load themes when DataWindow / Control is used
(*) CTL-397 Invalidate CommandManagerBindings when command is registered
(*) CTL-400 Don't handle errors in CommandManager when designer is attached
(*) CTL-413 ModelBase.Clone is now virtual
(*) CTL-425 Introduced IAdvancedEditableObject.CancelEditingCompleted to receive more information on how the IEditableObject
    has been canceled (was it canceled at all)
(*) CTL-426 DataWindow automatically use application icon if no icon specified
(*) CTL-440 Support nested view models (parent / child relations) when views are in ContentPresenter
(*) CTL-456 Allow DoubleClickToCommand timeout specific and default to 500ms
(*) CTL-460 Improve TraceOutputControl so it uses Catel logging system
(*) CTL-470 Naming conventions should not strip multiple postfixes
(*) CTL-473 Improve the way loaded views are handled
(*) CTL-479 Make IDataErrorInfo/IDataWarningInfo methods customizable in ModelBase
(*) CTL-481 Share lock for ServiceLocator / TypeFactory / DependencyResolver to prevent memory leaks
(*) CTL-512 FileLogListener should create directory if it doesn't exist
(*) CTL-521 Catel is now able to handle entities derived from a base class
(*) CTL-522 On exception within constructor of type created with TypeFacotry, information about lines with exception is lost
(*) CTL-524 Allow dynamic configuration for NET implementation of IConfigurationService. The implementation for NET no longer
    uses the ConfigurationManager.AppSettings but the DynamicConfiguration object so it's always reliable
(*) CTL-529 ViewModel should invalidate Command and CanExecute when child view model property changes
(*) CTL-530 Improve TypeCache so it can return array types
(-) CTL-453 Remove CommandManager code from Command
(x) CTL-327 ListCollectionView not supported in ChangeNotificationWrapper (causes InvalidCastException)
(x) CTL-329 VisualStateManager doesn't change state in WP8 in UserControl => introduced option to transfer styles and
    transitions: UserControl.TransferStylesAndTransitionsToViewModelGrid (default value is true)
(x) CTL-330 ViewModel gets unloaded before the view is actually unloaded in Windows Phone. The view models are now
    being closed in the Navigated event so it will be after the navigation transition has completed
(x) CTL-331 Fixed issue where validation errors in models where not cleared in the ValidationContext when the value
    was changed directly on the model
(x) CTL-332 Fixed StackOverflow in TypeHelper.IsBasicType for Nullable<> implementations
(x) CTL-335 Minus sign not working in Catel:NumericTextBox is NegativeAllowed="True"
(x) CTL-338 ViewModelManager gets double instance when it is injected before any ViewModel is used
(x) CTL-339 Serialization of protected Catel properties in non-WPF environment are being serialized even when they
    are decorated with the ExcludeFromSerialization attribute
(x) CTL-351 CommandManager throws NullReferenceException on KeyDown when no KeyGesture is registered
(x) CTL-357 NavigationContext is empty in Silverlight
(x) CTL-364 DbContextExtensions.GetEntitySet throws InvalidCastException in EF6
(x) CTL-368 XmlSerializer does not correctly serialize ICollection<AbstractClass>
(x) CTL-369 Catel should ignore resetting of LeanAndMeanModel during serialization
(x) CTL-371 HideValidationResults must also hide HasErrors and HasWarnings
(x) CTL-375 Views and view models don't detect DesignTime correctly
(x) CTL-378 Catel PleaseWaitHelper doesn't work in WinForms application
(x) CTL-381 LanguageService.GetResourceManager() method retrieves wrong assembly and therefore cannot find resource
(x) CTL-384 WarningAndErrorValidator should hide ValidationAdorner
(x) CTL-385 XmlAttribute values are not respected without explicit name
(x) CTL-395 IValidationSummary property is null and this prevents command execution in case there are no errors
(x) CTL-405 NullReferenceException is thrown in AutoCompletionBehavior when _availableSuggestions is null
(x) CTL-409 Fixed SplashScreenService implementation to be used in the Application.OnStartup method context
(x) CTL-416 Checking for for a binding IsSentinalBindingObject doesn't check for '{DisconnectedItem}'
(x) CTL-418 ConsoleLogListener doesn't reset colors after logging
(x) CTL-421 UserControl doesn't refresh on DataContextChanged when used as data template
(x) CTL-422 ViewLoadedManager does not release strong reference to views
(x) CTL-429 Call to StyleHelper.CreateStyleForwardersForDefaultStyles(); leads to exception
(x) CTL-437 Possible deadlock in ServiceLocator.ResolveType
(x) CTL-439 Catch up of property validation validates the same propery multiple times
(x) CTL-443 PleaseWaitService Displays "Please wait" instead of the message
(x) CTL-447 TabControl LoadItems="AllOnStartup" not working
(x) CTL-462 Memory Leaks using Language Binding
(x) CTL-463 Its not possible to register a CustomViewModelFactory
(x) CTL-464 Fixed SplashScreenService (due to Asynchronisity of UIVisualizerService)
(x) CTL-465 DebugLogListener SL throws InvalidOperationException on disabled html bridge
(x) CTL-466 Catel and Microsoft Fakes does not work because of reflection on explicit interface properties
(x) CTL-467 Async MessageService does not show MessageBox (Task gets never started)
(x) CTL-476 Exception in BootstrapperBase.RunWithSplashScreen<>()
(x) CTL-478 InfoBarMessageControl does not respect Horizontal/Vertical- (Content)Alignment
(x) CTL-487 TypeHelper doesn't always return the right typename / assemblyname
(x) CTL-504 Catel.Fody GenerateXmlSchema and WeaveProperties Bug where web service models were not being
    deserialized correctly
(x) CTL-512 Closing a window via CloseViewModel in the view model does not work
(x) CTL-517 Fixed possible NullReferenceException in AutoScroll behavior
(x) CTL-543 App crash on startup with CLR Assert Failure - mscorlib recursive resource lookup bug ReflectionTypeLoad_LoadFailed

Roadmap:
========
See http://www.catelproject.com/support/issue-tracker

Known issues:
=============
See http://www.catelproject.com/support/issue-tracker

**********************************************************

==================
Version 3.9.0
==================

Release date:
=============
2014/02/05

Added/fixed (BREAKING CHANGES):
===============================
(+) CTL-307 Added IViewModelContainer events for view load states (Loading, Loaded, Unloading, Unloaded). Catel now 
    correctly handles large nested trees which are correctly unloaded and no dummy view models are being created any 
    longer for sub views which are not yet (but about to be) unloaded. Catel is now aware that a view model is about 
    to be unloaded when the DataContextChanged event occurs (before a view is actually unloaded). This is a breaking 
    change for users that have implemented a custom base class for views. To fix the issue, implement the required 
    events on the views as explained at https://catelproject.atlassian.net/wiki/display/CTL/Using+a+custom+control
(*) CTL-313 Improved IoCConfiguration so it is easier to replace specific IoC components in Catel. This is a breaking
    change for users that manually instantiate the ServiceLocator or that have customized any component. For more
    information, visit https://catelproject.atlassian.net/wiki/display/CTL/Replacing+the+default+components
(-) CTL-273 Removed external container registration and synchronization support for the ServiceLocator. The reason
    for this is complex maintenance, bad performance (all done via reflection) and there are now better alternatives

Added/fixed:
============
(+) CTL-10 Added multilingual support with LanguageService and LanguageBinding (for XAML)
(+) CTL-24 ServiceLocator can now register types with a callback so types can be created using a function callback
(+) CTL-45 ServiceLocator can now register types using conventions
(+) CTL-204 Catel.IoC.IServiceLocator should contains some method to remove registered type
(+) CTL-262 Created CommandManager to support application-wide commands using MVVM
(+) CTL-266 Added ConfigurationService to get and set configuration values
(+) CTL-276 Add CompositeCommand to group several commands together
(+) CTL-283 Added ExcludeFromSerialization attribute to prevent annotation validation on properties where
    it should not be called on
(+) CTL-288 Added additional ProcessAsync methods on IExceptionService
(+) CTL-292 Added ServiceLocator extension methods for registrations with tags and RemoveType
(+) CTL-300 Added ChangeNotificationWrapper methods to unsubscribe and subscribe collections items manually
(+) CTL-302 Added TextToUpperCaseConverter and TextToLowerCaseConverter converters
(+) CTL-319 Added ParallelHelper to invoke actions on very large sets of items with a customizable batch size
(*) CTL-211 Renamed resource files of simple chinese from zh-CHS to zh-Hans
(*) CTL-230 XmlSchemaHelper now supports the new serialization engine introduced in Catel 3.7
(*) CTL-261 Replace all instances of RegisterDebugListener with AddDebugListener
(*) CTL-264 Reset FileServiceBase.ValidateNames default value to true
(*) CTL-285 Windows Phone navigation will now keep view models tight to their page instantiations and will only
    actively close a view model when the back button is used
(*) CTL-286 NavigationContext will now only be updated on the initial navigation for a view model
(*) CTL-295 Improved LocationService for Windows Phone 8
(*) CTL-320 All initialization modules in Catel now implement the IServiceLocatorInitializer interface. This allows
    developers to create IServiceLocator initializers which will automatically be called when creating a service locator
(x) CTL-232 XmlSerialization of complex types (interface collections of interfaces with each element of diff. class)
(x) CTL-268 EF 6 extension does not register types automatically
(x) CTL-275 Fixed implementation of StartUpInfoProvider Arguments property
(x) CTL-278 Validation throws exception on modelbase properties (should improve performance on validating models)
(x) CTL-294 ServiceLocator does not throw CircularDependencyException for some cases
(x) CTL-298 Nested view models with default constructor behave incorrectly. Now the child views are correctly closed
    as part of closing a nested hierarchy inside a DataWindow
(x) CTL-299 ChangeNotificationWrapper does not handle NotifyCollectionChangedAction.Reset correctly
(x) CTL-308 Serialization now omits the the default namespace for value types and strings which allows WCF
    services to use encryption
(x) CTL-311 MessageMediator issues when removing subscription
(x) CTL-314 Catel + Json.NET model causes ArgumentNullException during deserialization from json => ModelBase
(x) CTL-317 MVC DependencyResolver does not support dynamic new pages
(-) CTL-282 Removed AllowNonSerializedMembers attribute because it is no longer required because
    of the new serialization engine introduced in Catel 3.7

Roadmap:
========
See http://www.catelproject.com/support/issue-tracker

Known issues:
=============
See http://www.catelproject.com/support/issue-tracker

**********************************************************

==================
Version 3.8.1
==================

Release date:
=============
2013/12/11

Added/fixed:
============
(x) CTL-265 Prism Extension throws exception for non-existing NuGet catalogs

Roadmap:
========
See http://www.catelproject.com/support/issue-tracker

Known issues:
=============
See http://www.catelproject.com/support/issue-tracker

**********************************************************

==================
Version 3.8
==================

Release date:
=============
2013/12/06

Added/fixed (BREAKING CHANGES):
===============================
(+) CTL-234 Added IModelEqualityComparer properties (CompareProperties, CompareValues, CompareCollections) which
    are now defaulting to false. This means that it will now provide much better performance out of the box and
    follows the Microsoft standard (reference comparison only). It can be customized to check the properties to
    reproduce the previous behavior
(*) Moved serialization for Xml and Binary to namespaces. This should only cause breaking changes if one of the
    actual core serialization parts are modified
(-) CTL-199 Removed support for Windows Phone 7.x
(-) CTL-200 Removed support for Silverlight 4

Added/fixed:
============
(+) CTL-142 Added support for WIN81
(+) CTL-157 Provide an option to prevent close with Escape for datawindows
(+) CTL-161 Allow registration and resolving of generic types, this means that one can now register an open
    generic type like IDictionary<,> and resolve it as IDictionary<string, int>
(+) CTL-184 Added Retry methods on IExceptionService to allow retrying actions
(+) CTL-191 Create LogListeners from the application config
(+) CTL-205 Added Async methods on IExceptionService
(+) CTL-208 Added support for Entity Framework 6 in a new extension (Catel.Extensions.EntityFramework6)
(+) CTL-219 Implemented BackEntry methods for Windows Phone 8 on the NavigationService
(+) CTL-221 Support property dependency injection
(+) CTL-227 Added the GetHandler method on IExceptionService to allows handlers retrieving more easilly.
(+) CTL-229 Add XmlSerializerOptimalizationMode to allow pretty xml or performance
(+) CTL-235 Added option to allow global enabling / disabling (overriding) of log events on all listeners
(+) CTL-242 Create extension methods for IParent interface
(+) CTL-246 Added CatelTypeInfo (replaces PropertyDataManager.GetCatelProperties()) so more information can be 
    retrieved about Catel types than just the properties
(+) CTL-246 Attribute validation on non-catel properties will be validated now as well as long as the validation
    is called with the forced parameter set to true
(*) CTL-125 TypeFactory selects wrong constructor when there is more than 1 option. It now tries parameters which 
    accept Object or DynamicObject the latest. Also introduced the InjectionConstructorAttribute so the right constructor
    can be decorated so it is always selected first by Catel
(*) CTL-155 Replace usages of IServiceLocator by IDependencyResolver
(*) CTL-196 Argument class methods are now decorated with DebuggerNonUserCode in addition to DebuggerStepThrough 
    to provide a better callstack during exceptions at runtime
(*) CTL-202 Small improvements in ModelEqualityComparer to improve performance on large collections
(*) CTL-203 Marked most ModelBase.Load methods as obsolete. Now only 3 methods are recommend to simplify the 
    serialization of models
(*) CTL-207 Improve performance on ModelBase instantiation
(*) CTL-213 Updated FluentValidation to v5
(*) CTL-214 Updated CSLA.NET to v4.5.40
(*) CTL-216 Created generic NotSupportedInPlatform exception with details why a specific feature might not be supported on a 
    specific platform. Also introduced Platforms.CurrentPlatform to determine which platform Catel is currently running on
(*) CTL-218 PleaseWaitWindow now sets IsHitTestVisible to false for dimmed windows to prevent clickable buttons during period
(*) CTL-224 Refactoring on Exception Handling to allows enhancements easier
(x) CTL-133 Start and Update the PleasewaitWindow in an Workerthread throws exception
(x) CTL-203 The Load Method of Catel.Data.ModelBase will call the constructor of the deserialized class two times
(x) CTL-212 PropertyDataManager throws first chance exceptions for generic types
(x) CTL-226 Nested ICollection<IInterfce> XML serialization problem
(x) CTL-228 Fixed possible deadlock in CatelDependencyResolver
(x) CTL-240 WP8: "This operation is not supported for a relative URI" on GoBack to the main page
(x) CTL-241 WP8: after the first creation, ViewModels are created twice for each call
(x) CTL-245 Fixed issue where deprecated classes were still decorated with the XmlSchemaProviderAttribute which caused WCF
    to fail and generate a proxy when using "reuse types in all assemblies"
(x) CTL-254 Log with { and } in literal string caused errors

Roadmap:
========
See http://www.catelproject.com/support/issue-tracker

Known issues:
=============
See http://www.catelproject.com/support/issue-tracker

**********************************************************

==================
Version 3.7
==================

Release date:
=============
2013/10/18

Added/fixed (BREAKING CHANGES):
===============================
(*) CTL-4 Completely rewritten the serialization engine. This means that the logic is now extracted from the 
    ModelBase into separate serializers which can be easily customized. It should also fix a few minor issues
    that were occurring due to the complexity of the old system
(*) Moved memento namespace to a separate extension (Catel.Extensions.Memento) to make the core more lightweight
(*) Change UpdateStatus method signature of ITaskProgressTracker
(*) IEntityRepository new returns an IQueryable instead of IEnumerable on retrieval methods
(-) CTL-4 Removed the SerializationHelper (now moved into separate classes registered in the ServiceLocator)

Added/fixed:
============
(+) CTL-5 Added Interception extension to create runtime interception of methods and properties
(+) CTL-6 Dependency injection is now supported in child view models. This makes it possible to combine both model
    injection with auto-completion from services registered in the ServiceLocator
(+) CTL-7 Added support for empty cell in the StackGrid control
(+) CTL-26 Added IQueryable<T>.Include extension so it is easier to include properties in an EF query
(+) CTL-39 Added IStartUpInfoProvider to allow the access to information such as InitParams (SL) or Arguments (NET) 
    from any application point
(+) CTL-58 Automatic de/serialization of specified fields within ModelBase using the IncludeInSerialization and
    ExcludeFromSerialization attributes which also work on regular properties and fields
(+) CTL-99 Added extensions methods for the IViewModelManager to allow the closing of all view models that match a 
    specified predicate
(+) CTL-111 Added BootstrapperTaskFactory to allow customization of the bootstrapper tasks for prism. Also added
    a lot of events to the BootstrapperBase to allow fine-grained control without having to derive a custom bootstrapper
(+) CTL-113 Added untyped expression overload for PropertyHelper.GetPropertyName
(+) CTL-118 Added support for Portable Class Library (PCL)
(+) CTL-127 Added DbContextExtensions to set the isolation level of a DbContext
(+) CTL-129 Added BatchLogListenerBase to write log events in configurable batches
(+) CTL-130 Added FileLogListener which writes to a log file in batches
(+) CTL-135 Added TaskCommand to Catel.MVVM (NET45, WIN80 and WP8 only)
(+) CTL-139 Added DynamicObjects extension
(+) CTL-152 Added MementoService.IsEnabled to temporarily disable addition of batches and actions
(+) CTL-153 Added GetChildrenViewModels to IViewModelManager to allow retrieving all alive children view models instances of 
    a specified view model
(+) CTL-154 Added DependencyResolver and DependencyResolverManager
(+) CTL-167 Implemented SafeDirectoryModuleCatalog in Extensions.Prism because the default Prism directory catalog is not safe
(+) CTL-171 Added ReferenceManager to create a dictionary of references and unique identifiers
(+) CTL-172 Added ScopeManager to create custom scopes for any objects
(+) CTL-175 It is now possible to customize and replace of IoC components (for example, to use an external IoC container)
(+) CTL-178 Added possibility to implement a custom the ModelEqualityComparer. It can be overridden by instance (setting
    the EqualityComparer) or for all models (registering it in the ServiceLocator)
(+) Added extension method for ISplashScreenService for Prism to show progress control in a region
(+) Added some additionnals members in IViewManager.
(+) Added support to Commit enqueued tasks using an existing instance view model for SplashScreenService
(+) Added RegisterViewWithRegion<TView> method extension for IRegionManager to easily register a view type for a region
(*) CTL-11 IOpenFileService and ISaveFileService for NET40 and NET45 now implement all FileDialog properties that are
    available. The ISelectDirectorService no long implements interface IFileSupport
(*) CTL-117 Title property on ViewModelBase now has a setter as well which implements INotifyPropertyChanged
(*) CTL-126 Upgrade support for FluentValidation to 4.0.0.1
(*) CTL-151 Marked GetService on ViewModelBase and ServiceBase as obsolete => use dependency injection instead
(*) CTL-168 Buffering in Exception Handling so multiple exceptions can be throttled to prevent spamming
(*) CTL-187 Access to PropertyDataManager is now public to query properties of types
(*) CTL-194 ServiceLocatorRegistration attribute must be able to directly instantiate
(*) CTL-195 ServiceLocator.RegisterType with interface type should throw clear exception
(*) Changed the returned type of IViewModelManager.GetFirstOrDefaultInstance to the specified view model type
(*) Improved GetFromCacheOrFetch performance avoiding the serialization of multiples threads calls with different keys
(x) CTL-103 Fixed issue where WindowLogic could not correctly close a non-modal dialog in WPF
(x) CTL-108 Fixed issues with WeakEventListeners and WinRT
(x) CTL-112 Fixed issue where ViewToViewModel mappings did not work in WPF
(x) CTL-116 Fixed issue where some referenced assemblies cause Catel to break the designer in Windows 8.1 apps
(x) CTL-124 Fixed issue in PropertyBag where it checked whether the old value was equal to the new value. This could
    cause a StackOverflow when 2 different instances were equal (but not the same reference). The PropertyBag now checks
    whether the values are equal by reference
(x) CTL-128 Problem with navigation in WinRT apps
(x) CTL-132 Fixed bug where LinkLabel.Command actually returned the CommandParameter
(x) CTL-141 'ResourceMap Not Found' in WIN80 project
(x) CTL-143 [WIN80] UseControl content change subscription does not work
(x) CTL-144 ServiceLocator exporting might cause CircularDependencyException
(x) CTL-147 GetFirstValidationErrorConverter might throw NullReferenceException
(x) CTL-148 NumberTextBox behavior no longer allows pasting of text without numeric values
(x) CTL-156 PleaseWaitService.Push doesn't show correct message
(x) CTL-176 Fixed issue in TypeHelper.GetTypeName for generic types where the inner types would not be handled
(x) CTL-177 TypeFactory scoping too strict to allow inner type construction. The TypeRequestPath now removes types from the
    path when they are successfully instantiated to provide a better and less strict scoping mechanism
(x) CTL-179 Fixed issue when Modifiers="None" was used on behaviors (default value), pressing SHIFT and a character wouldn't
    trigger the events
(x) CTL-182 Fixed memory leak in nested view models and view models that had SupportIEditableObject set to false
(x) CTL-185 Unloading a view via UserControlLogic might resolve in memory leaks
(x) CTL-186 ViewModelPropertyDescriptor not respect the custom attribute, ViewModelPropertyDescriptor.Attributes.Count always 0
(x) CTL-190 TypeCache throws exception when same non-existing late-bound type is queried twice
(x) CTL-193 Unable to create catel window in seperate thread
(x) CTL-197 Behaviors no longer handle logic in design mode so properties will never throw exceptions at design time
(x) CTL-198 Exception on FieldValidationResult.CreateError when validate formatting string contains braces
(x) Unloading a view via UserControlLogic might resolve in memory leaks
(x) Fixed Drag and Drop behavior when the drop position is less then the initial item's position
(x) Ensured the value of Owner property of Shell to NULL in order to avoid the application close  when the SplashScreenService done
(x) Ensured Bootstrapper UI tasks calls using DispatcherService
(x) Removed the usage of the DispatcherService to execute a task in SplashScreenService to allow smoothly notification 
    of the task progress

To-do:
======
See http://www.catelproject.com/support/issue-tracker

Known issues:
=============
See http://www.catelproject.com/support/issue-tracker

**********************************************************

==================
Version 3.6
==================

Release date:
=============
2013/06/29

Added/fixed (BREAKING CHANGES):
===============================
(*) Moved all generic methods from the ServiceLocator to IServiceLocatorExtensions so its easier to implement the IServiceLocator
    interface. It also gives us more freedom in the future to develop new features around the service locator. In very rare cases,
    this will be a breaking change. To fix this, simply include the Catel.IoC namespace.
(*) [CTL-69] Updated FluentValidation extension to FluentValidation 4. Because this new version no longer supports SL4, the SL4 version
    of the extension is also dropped
(*) [CTL-71] Updated CSLA to version 4.5.20. Because this new version no longer supports SL4, the SL4 version of the extension is also dropped
(*) [CTL-74] Catel no longer subscribes to MessageMediator in ViewModelBase by default. If users want this behavior, they can implement it in 
    their own ViewModelBase (deriving from Catel VMB), but not all users have to experience this negative impact on performance

Added/fixed:
============
(+) [CTL-29] Added circular dependency protection to the TypeFactory. This means that if there are types with a circular dependency using 
    dependency injection, the TypeFactory will throw a CircularDependencyException with the exact type path which was used to create
    the type instead of a StackOverflow without any info
(+) [CTL-36] Added batches to the MementoService which now allows to easily group multiple actions together in a batch
(+) [CTL-64] Added property bag to allow easy property registration of dynamic objects
(+) [CTL-67] Added IContextFactory to allow customization of DbContext instantiation
(+) [CTL-56] Added ThrottlerRate to allow the throttling of change notifications to the UI to bring down the frame rate of applications
    so the CPU can be used for other tasks instead
(+) [CTL-43] Added ValidateModelAttribute to specify external IValidator classes via annotations at Class level
(+) [CTL-55] ValidationContext now contains modification methods and the IValidator contains a Validate method which accepts a
    ValidationContext. This way it should be easier to write simple validators and modify the existing validation context
(+) [CTL-75] Added FrameRate counter for WPF to easily measure the frame rate of an application
(+) [CTL-88] Added SelectDirectoryService to let the user select a directory
(+) [CTL-82] Added ViewModelToViewConverter to Silverlight projects
(+) [CTL-85] Added ServiceDependency markup extension to Silverlight 5 project (MarkupExtension is not supported in SL4)
(+) [CTL-91] Added ViewExportService to print or save a visual element that belongs to a view model
(+) [CTL-94] Added SchedulerService which allows to schedule actions in the relative or absolute future
(+) Added the IExceptionService.IsExceptionRegistered method to know if an exception type is registered for handling
(+) Added BindingWithValidation for NET40 and NET45 where {catel:BindingWithValidation MyProp} can now be used instead of
    {Binding Path=MyProp, NotifyOnValidationErrors=True, ValidatesOnDataErrors=True}
(+) Added IMessageMediator.IsMessageRegistered to know if a message type is registered
(*) [CTL-51] Allow ViewModelFactory to determine whether a view model can be reused
(*) [CTL-32] Changed UnitOfWork.SaveChanges default options to SaveOptions.DetectChangesBeforeSave | SaveOptions.AcceptAllChangesAfterSave
(*) [CTL-31] The MVC dependency resolver now also supports dependency injection in non-abstract non-registered classes (such as controllers)
(*) [CTL-35] Performance improvement on first validation sequence for non-existing properties in ModelBase
(*) [CTL-44] External container synchronization for the ServiceLocator now respects both Singleton and Transient registration types in the
    the external containers unless they don't support this information (such as MEF and Castle Windsor)
(*) [CTL-68] Command now dispatches events which is a major performance improvements when properties are changed from a background thread
(*) [CTL-57] Performance improvements. Among these changes were disabling the reflection cache (was actually slower), disabling the default
    subscription to MessageMediator (see CTL-74) and the introduction of the IDependencyPropertySelector. For more information about
    performance, please check out the performance considerations: https://catelproject.atlassian.net/wiki/display/CTL/Performance+considerations
(*) [CTL-84] All converters based on ValueConverterBase can now be chained after eachother by using the Link property
(*) [CTL-86] Improved DoubleClickToCommand behavior for grids
(*) [CTL-83] ChangeNotificationWrapper now supports both collection and property changes at the same time
(*) [CTL-81] Prevent a change in case the validationsummary has not changed which should improve performance in some cases. Note that for this
    to be reliable, Catel uses the Stopwatch instead of DateTime because DateTime is not accurate enough. Since the Stopwatch is only available
    in the full .NET framework, all other target frameworks will always assume a validation context or summary is outdated
(*) [CTL-87] The TypeFactory circular dependency protection now ignores if duplicate types are requested directly
    after eachother. This might result in unwanted behavior if the same type is used as injection in the same
    type, but these cases are very rare. This changes fixes an issue where prism resolves the same type several times
    after eachother
(*) CTL-96 Fixed unreliable loaded event in Silverlight (and WP and WinRT) which sometimes did not behave top => down on controls like the 
    tab control. We fixed this by adding a FrameworkElementLoadedManager which will handle the right order of events for Catel
(-) Removed EffectsHelper class from Catel.Extensions.Controls because it was already included in Catel.MVVM
(x) [CTL-20] Fixed issue where the WeakEventListener could not handle explicitly implemented events
(x) Fixed issue where default values were not correctly subscribed to via weak events. This caused the protected change notifications
    not to work for default values
(x) [CTL-34] Fixed Windows Phone issue with the Lazy<T> class (which was used by the Argument checks)
(x) Fixed issue in DragDrop behavior where DragStarted was called to many times
(x) [CTL-46] Fixed issue where in some very rare cases (when the same view model is used in views in the same chain of views), the UserControlLogic 
    would cause a StackOverflow when saving or canceling a view model
(x) [CTL-61] Fix very rare cases of bad inheritance of view models in LogicBase
(x) [CTL-65] Fixed issue where process tools in the EnvironmentHelper were not ignoring case for "blend.exe" and "devenv.exe"
(x) [CTL-66] AutoRegistrationManager for ServiceLocator causes deadlock in design time
(x) [CTL-72] Serialization issue with very complex hierarchies and xml serialization
(x) [CTL-41] Silverlight TypeCache doesn't load types from mscorlib and system
(x) [PR-3] Added support for KnownTypeAttribute with method name instead of a type

To-do:
======
See https://catelproject.atlassian.net

Known issues:
=============
See https://catelproject.atlassian.net

**********************************************************

==================
Version 3.5
==================

Release date:
=============
2012/03/23

Added/fixed (BREAKING CHANGES):
===============================
(x) Removed automatic property change notification of sub property models in the ModelBase. This logic is now implemented in the
    ChangeNotificationWrapper class which is fully based on weak references and weak event listeners. This has been done to fix
    a memory leak issue in the model base
(*) Moved all type resolving from TypeHelper to TypeCache
(-) Removed all .NET 3.5 projects, .NET 4.0 is now the minimal required version

Added/fixed:
============
(+) Added Argument.InheritsFrom to check if an instance inherits from a type.
(+) Added options to configure a service locator from configuration file.
(+) Added ServiceLocator.CanResolveNonAbstractTypesWithoutRegistration to setup service locator behavior for non-abstract
    types resolution without registration
(+) ServiceLocator resolves non-abstract types without registration.
(+) Added IsValid method in Argument class
(+) Added ChangeNotificationWrapper to get no-memory-leak safe change notifications of objects and collections
(+) Added ConsoleLogListener to write to the console for console applications
(+) Added the SendMessageAsync method in IMessageMediator
(+) Added INeedCustomInitialization to allow custom initialization of types created by the TypeFactory
(+) Added Catel.Mvc libraries with features especially built for ASP.NET MVC
(+) Added ServiceLocator.RemoveInstance and a couple of overloads of ServiceLocator.RemoveAllInstances methods to remove instance 
    from the service locator
(+) Added ServiceLocator.ResolveTypes method to resolve all instances for an interface type
(+) Added auto register types via attributes feature to the service locator
(+) Added expression overloads to IsMinimal, IsMaximum, ImplementsInterface, ImplementsOneOfTheInterfaces, IsOfType, 
    IsOfOneOfTheTypes, IsNotOfType, IsNotOfOneOfTheTypes, IsNotMatch and IsMatch methods of Argument class
(+) Added expression overloads to IsNotNull, IsNotNullOrEmpty, IsNotNullOrEmpty, IsNotNullOrEmpty, IsNotNullOrWhitespace, 
    IsNotNullOrEmptyArray and IsNotOutOfRange methods of Argument class
(+) Added support for Entity Framework 5 with repositories, unit of work and a DbContextManager
(+) Added Composite expiration policy to combine serveral expiration policies into a single one
(+) Added Custom expiration policy
(+) Added some exception extensions
(+) Added a generic overload to RegisterProperty method of the ModelBase class as option to avoid the usage of "magic strings" 
    as property name. Now the property name can be computed from an existing property. 
    The usage of this method improves the refactoring process
(+) Added time related cache expiration policies including Absolute, Duration and Sliding
(+) Added InfoBarMessageControl.DefaultTextPropertyValue to customize the Text property for a complete application
(+) Added ValidationContextExtensions to merge ValidationContext objects
(+) Added specification pattern implementation to Catel.Extensions.Data
(+) Added TaskHelper with task helper methods for all frameworks (also for frameworks without Task class)
(+) Added tag parameter to all CommandHelper methods
(+) Added PropertyHelper which can resolve property names based on a linq expression
(+) Added PropertyChangedEventArgs extensiosn which can check for specific property changes based on expressions
(+) Added ServiceLocator.GetRegistrationInfo to retrieve registration info about a registered type
(+) Added System.Threading.Timer to WinRT because the DispatcherThread can only be used on the UI thread (and causes unit tests
    of view models to fail)
(*) ModelBase now supports calculated properties as registered properties which can be used during validation
(*) Updated RedirectDeserializationBinder LoadType method to call GetType from TypeCache instead from Type
(*) The ModelBase.RegisterProperty now contains an override for the SetParent
(*) Attribute validation on non-public properties in Silverlight is now disabled to prevent unnecessary exceptions
(*) Logging now supports extra data which can be used in custom listeners and logging stategies
(*) Moved some logic from Log to ILogExtensions so users don't have to reimplement the same logic in several loggers
(*) Performance improvement when constructing view models without parameters
(*) AssemblyHelper.RegisterAssembliesFromXap now automatically registers type in the TypeCache
(*) AssemblyHelper.RegisterAssembliesFromXap now allows registering types in a background thread
(*) UniqueIdentifierHelper is now thread-safe
(*) Updated Catel.Extensions.CSLA dependency to 4.5.10
(*) WeakEventListener now also supports explicitly implemented events
(*) Catel.Extensions.FluentValidation no longer requires a reference to Catel.MVVM. A reference to Catel.Core is sufficient so
    it can also be used on server side validation
(x) Fixed issue with xml serialization where an object with just collections wasn't deserialized correctly
(x) Fixed several issues with the Windows Phone navigation service and logic
(x) Fixed LayoutCycleException in the PleaseWaitService for Silverlight when used in combination with DevExpress controls
(x) Fixed issue in WeakEventListener for WinRT
(x) Fixed possible multithreading issue in the ServiceLocator
(x) Fixed memory leak in view model metadata
(x) Fixed issue where initial errors were not always shown directly by the InfoBarMessageControl
(x) Fixed memory leak in the PopupHelper for WPF

To-do:
======
See https://catelproject.atlassian.net

Known issues:
===========
See https://catelproject.atlassian.net

**********************************************************

==================
Version 3.4
==================

Release date:
=============
2012/12/15

Fixed since beta 1:
===================
(+) Added DownloadingModuleCatalog for Silverlight to quickly set up prism applications using Catel and Silverlight
(+) Added FastObservableCollections which supports raising single events while adding/removing multiple items
(+) Added ModelBase.LeanAndMeanModel property to suspend both validation and change notifications at once
(+) Added ObjectHelper.AreEqualReferences to check for reference equality. This method however also assumes that value types
    with the same value are equal. This method is now used in the ModelBase.SetValue
(+) Added WindowEventToCommand behavior for WPF to easily subscribe to window events
(+) Added ViewModelBase.OnClosing and ViewModelBase.OnClosed methods
(+) Added UserControl.CreateWarningAndErrorValidatorForViewModel to prevent the creation of the WarningAndErrorValidator
    for a control when it is not being used
(+) Added ModelBase.SuspendValidationForAllModels to suspend all validation for all classes deriving from ModelBase
(*) InfoBarMessageControl.SubscribeWarningAndErrorValidator and UnsubscribeWarningAndErrorValidator are now public
(*) WarningAndErrorValidator now checks both visual and logical tree instead of logical tree only for InfoBarMessageControl
(*) CacheFactory is marked obsolete, you can now directly construct the CacheStorage class
(*) ViewModelClosedEventArgs now contains the IViewModel instance that has been closed
(*) When validation on the ModelBase is suspended, it will no longer validate values via data annotations. As soon as the
    validation is enabled again, the properties will be checked
(*) Updated the Activate extension method (from Prism extension) to ensure the viewmodel's parent-child relationship.
(x) Fix in DebugLogListener for chrome where it sometimes throws an unhandled exception (the browser itself)
(x) Simplified and improved the way change notifications are implemented for non-WPF technologies
(x) Fixed the fake DirectDependency binding error
(x) Fixed centering issue and status update issue in PleaseWaitService for Silverlight
(x) Fixed several issues in view model lifetime management and the navigation service for Windows Phone
(x) Fixed designer issues where the callstack would complain about _logic which is null

Added/fixed:
============
(+) Added WinRT support (beta)
(+) Added Windows Phone 8 support (beta)
(+) Added NavigationViewModelBase which adds Back and Forward commands
(+) ServiceLocator now supports service registrations with tags (such as names, but any type is supported)
(+) Added Catel.Extensions.CSLA to support CSLA ViewModelBase in combination with Catel
(+) Added Argument.IsNotNullOrEmpty for the Guid class which supports Guid.Empty checks
(+) Added AuditingHelper which automatically adds auditing for an instance of IViewModel. This way, it's easier
    to create custom implementations of IViewModel where only the events have to be implemented
(+) Added ViewModelCommandManager which now manages the commands of a view model. This way, it's easier to create
    custom implementations of IViewModel where only the events have to be implemented
(+) Added IServiceLocator.TypeRegistered event which is invoked when a type is registered
(+) Added ITypeFactory which caches constructors for type instantiated to ensure the best performance possible
(+) Added IDispatcherService.BeginInvokeIfRequired as additional feature to the dispatcher service
(+) Added expiration options to the CacheStorage, renamed CacheHelper to CacheFactory
(+) Added Navigate behavior for the Hyperlink control in WPF
(+) Added ServiceBase to Catel.Core so it is easy to derive custom services from now on without having to implement the
    base logic yourself on every project
(+) Added an extension method to the IUIVisualizerService, as part of Prism Extension, to activate a view model as child of an actived one. 
    Now Prism UI composition is fully sopported from a view model first approach.
(+) Added a thread safe and inheritable (with correcteness) version of ModuleCatalog.
(+) Added experimental extension method to show a window from it's view model and notifies when the window is actually 
    opened (registered in the ViewManager).
(*) If an object supports ToString(IFormatProvider), the ObjectToStringHelper will pass CultureInfo.InvariantCulture
    to make sure the values are converted to string without having to care about different cultures
(*) Refactored ServiceLocator to improve performance of transient type resolving
(*) IEditableObject implementations (DataObjectBase and ViewModelBase) now don't deserialize the backup fields
    unless it is really necessary (a call to CancelEdit) which improves the startup performance with appr. 30 %
(*) Performance improvements in general
(*) UIVisualizerService for WPF now requires ContentControl instead of Window as minimum class to allow more customization
(*) IServiceLocator now implements the IServiceProvider interface as well
(*) Focus behavior now sets the focus at the end when the control is a textbox
(*) ViewModelBase now supports all models instead of only the DataObjectBase as model with IEditableObject support
(*) BREAKING CHANGE: Renamed DataObjectBase to ModelBase to provide a better industry standard name for the class
(*) Exposed properties using the Expose attribute will now fall back to default values when model is set to null
(*) ServiceLocator is now thread-safe
(*) PleaseWaitService in silverlight now allows custom parent elements
(*) Catel.Core assembly now automatically registers all services automatically at module initialization
(*) If a view model is injected in a view, the view automatically sets its ViewModelBehavior to Injected instead of Dynamic
    and the view model will not be updated for the lifetime of that view
(*) Reimplemented CompositeModuleCatalog inheriting from the Catel.Modules.ModuleCatalog instead from 
    Microsoft.Practices.Prism.Modularity.ModuleCatalog.
(*) CompositeModuleCatalog allows cross module catalog's module dependencies.
(*) Xml deserialization with xml namespaces is less strict so it can deserialize in case of wrong namespaces
(-) Removed generic ModelBase<T> (previously known as DataObjectBase<T>), generic is not needed
(x) Fix in shader effects which are not available during debugging although they work at runtime
(x) Fixed issue that StackGrid did not work in VS2012/Blend designer
(x) Fixed double initialization issue in Silverlight. This was causes by the fact that the Loaded event in WPF is called
    from top => bottom, but in Silverlight from bottom => top. Catel now uses (abuses) the LayoutUpdated event to fake the
    Loaded event (because the LayoutUpdated is called from top => bottom in Silverlight).
(x) Fixed issue in LogicBase where dependency property changes of associated target controls were not properly called. This
    fix makes to code easier to maintain and implements the logic as expected
(x) IViewModelContainer now implements INotifyPropertyChanged so PropertyChanged events are actually picked up by the binding system
(x) Fixed GetInstance method implementation of ServiceLocatorAdapter to register non-abstract classes with 
    RegistrationType.Transient (just like Prism expect).
(x) Fixed RegionAdapterMappings now is registered as singleton on ModuleInitializer (just like Prism expect).
(x) Fixed the search of the first parent region manager to make IU composition feature works properly.
(x) Fixed issue where ModelBase.PropertyChanging was called when the property values were equal. Now the ModelBase will not invoke
    the PropertyChanging event when the values are equal, just like the PropertyChanged event

To-do:
======
See http://catel.codeplex.com/workitem/list/basic

Known issues:
===========
See http://catel.codeplex.com/workitem/list/basic

**********************************************************

===========
Version 3.3
===========

Release date:
=============
2012/09/09

Fixed since RC 1:
=================
(*) Argument.IsOfType now ignore COM types because they cannot be checked

Fixed since beta 2:
===================
(+) Added Module Manager View
(x) Bug fix in case-insensitive search

Fixed since beta 1:
===================
(+) Added ViewModelToViewConverter for WPF
(*) ValueConvertBase now implements MarkupExtension in WPF and SL5
(*) Enhanced the BooleanToGrayscaleConverter so it can be customized
(*) TypeHelper now supports case-insensitive search for types
(x) Fixed issue where re-using the same view model instance in a nested user control scenario caused a stackoverflow exception
(x) Fixed issue where EventToCommand.DisableAssociatedObjectOnCannotExecute was not working correctly
(x) Fixed issue where the designer was not always able to load views in silverlight

Added/fixed:
============
(+) Added IViewModelManager.ActiveViewModels property which allows to retrieve all active viewmodels.
(+) Added IViewModelManager.GetFirstOrDefaultInstance<TViewModel>() to get the first or default instance of the specified view model.
(+) Added support to task smooth progress notification of an executing task by SplashScreenService when 
    the viewmodel type of the splash screen window is specified.
(+) Added support to notify progress of an ActionTask through of ITaskProgressTracker interface.
(+) Added support to the SplashScreenService to notify the progress via IProgressNotifyableViewModel 
    using IUVisualizerService
(+) Added SplashScreenService to execute a batch of enqueued tasks and notify the progress through IPleaseWaitService
(+) Added support to type resolution with object life cycle or style management (Singleton or Transient) for 
    ServiceLocator including it's synchronization with external containers that support this kind of instantiation
(+) DataObjectBase xml serializer now supports XmlIgnore, XmlElement and XmlAttribute attributes
(+) Introduced IAdvancedNotifyPropertyChanging with AdvancedNotifyPropertyChangingEventArgs which allow
    the developer to prevent a property change from happening
(+) Added INotifyPropertyChanging interface for SL4
(+) Added ViewModelBase.IsSaving property
(+) Added ExceptionService to create a generic exception handling policy for an application
(+) Added UpdateBindingOnPasswordChanged behavior
(+) Added IViewManager to find a view that uses a specific view model
(+) Added IViewModelManager to find all view models of a specific model
(+) Added PropertyData.IncludeInBackup on the DataObjectBase to ignore specific properties from being supported 
    in the IEditableObject implementation
(+) Added actual implementation for ViewModelBase.HasDirtyModel
(+) Added IServiceLocator.RegisterInstance(Type, Object)
(*) BREAKING CHANGE: IViewModel.Canceling now supports CancelingEventArgs and allows the cancel to be canceled. This
    also counts for the CancelViewModel and CancelAndCloseViewModel methods, which now behave the same like Save
(*) TraceOutputControl now supports log messages from any thread
(*) InfoBarMessageControl now supports multiple WarningAndErrorValidator elements at the same time
(*) UIVisualizerService now supports ContentControl as window type in SL to support DXWindow (DevExpress)
(*) Changed default value of ViewModelBase.InvalidateCommandsOnPropertyChanged to true for WPF as well
(-) Removed json support in DataObjectBase. It is better to use an external json serializer like json.net
(x) TagHelper.AreTagsEqual now checks the casing for tags as well
(x) Fixed issue where ReflectionExtensions.IsInstanceOfTypeEx would return false for an integer that is
    defined as a long. The IsInstanceOfTypeEx now also checks for implicit cast options
(x) ViewModelBase.UnregisterCommands is now safer with try catch when setting a property to null fails
(x) Fixed issue with hierarchical xml serialization and collection types that shared interfaces
(x) Fix to prevent unneccessary view model instantiation due to a bug in WPF 4 (sentinel nodes)
(x) Fixed issue in IViewModelLocator where postfixes were removed, even though it were not real postfixes. For
    example, 'MyNameViewer' will now resolve 'MyNameViewerViewModel' instead of 'MyNameerViewModel'
(x) Fixed issue where PleaseWaitWindow was not thread safe in all cases
(x) Fixed designer issue when classes call LogManager.GetCurrentClassLogger in design mode
(x) Fixed issue where SynchronizationContext would cause a deadlock in nested thread calls
(x) Fixed the type registration implementation removing the existing registered instance to allow the 
    change the instantiation style of a registered type

To-do:
======
See http://catel.codeplex.com/workitem/list/basic

Known issues:
===========
See http://catel.codeplex.com/workitem/list/basic

**********************************************************

===========
Version 3.2
===========

Release date:
=============
2012/07/08

Fixed since RC 2:
=================
(+) Added EndEditEventArgs and CancelEditEventArgs which allows to cancel the actual call and allow 
    customization of the IEditableObject implementation 
(*) Introduced base class for all external helper classes for 3rd party IoC containers so it actually
    doesn't matter what version of the external libraries you are using. It will always use the runtime
    defined as external container. This means that you can, for example, use Unity 1 and Unity 2 together
    at the same time
(*) Small changes in ModuleBase and the Prism bootstrapper

Fixed since RC 1:
=================
(+) Added BindingUpdateBehaviorBase so it is easier to create behaviors that update a binding
(+) Added DependencyInjectionHelper so it is possible to use dependency injection for any type
(+) Added ModuleBase in prism extension
(+) Re-introduced TraceOutputControl in Catel.Extensions.Controls
(+) Added generic prism bootstrapper so it is easier to instantiate a shell (just define the shell type)
(*) Major performance improvements when (de)serializing xml in large AppDomains. Types from assemblies
    are now cached instead of retrieved for every single type
(x) DataObjectBase.SetValue no longer fails if value is a dynamic COM object and does not meet the property
    type specification
(x) Fix in Enum<T>.TryParse, no longer throws exceptions when it fails to parse
(x) Fix in very rare and hard to reproduce issue where the .NET runtime keeps calling OnDeserialized on
    objects that are already deserialized and can cause a stackoverflow

Fixed since beta 5:
===================
(+) Added CommandBehaviorBase, CommandEventTriggerBase, CommandTriggerActionBase and CommandTriggerBase to
    easily create any expression blend behaviors or triggers that support commands, command parameters and key
    modifiers. All behaviors and triggers in Catel that support commands now also support command parameters and
    key modifiers out of the box.
(+) Added ObjectToStringHelper to easily convert an object (even when null) to a string
(+) Added TypeHelper.ConvertTypeToVersionIndependentType and TypeHelper.GetInnerTypes methods
(+) Added MessageRecipient attribute to easily subscribe to the message mediator
(+) Added HashHelper.CombineHash to generate a unique hash for a combination of hashes
(+) Added ServiceDependency markup extension to easily allow retrieval of services in the ServiceLocator in xaml
(+) Added MemberInfoExtensions to get the signature of a ConstructorInfo or MethodInfo
(+) ServiceLocator now supports dependency injection for constructors when resolving types
(+) Added virtual property IDispatcherService.CurrentDispatcher to be able to customize the current dispatcher
(*) ServiceLocator now always instantiates services when external container synchronization is enabled to make sure
    all containers return the same instance of the services
(*) DispatcherObservableObject now uses DispatcherServer.BeginInvoke instead of DispatcherService.Invoke
(*) IEditableObject.BeginEdit no longer throws an exception when it is called twice, which comes closer to the
    behavior as explained on MSDN
(*) Moved TypeHelper.AreObjectsEqual to ObjectHelper.AreEqual
(*) Several improvements to the prism bootstrapper in Catel.Extensions.Prism
(x) Fix in SerializationHelper (binary) when using GetValue due to wrong string format string
(x) IDataErrorInfo[columnName] and IDataWarningInfo[columnName] can now correctly handle string.Empty property changes

Fixed since beta 4:
===================
(+) Added DispatcherObservableObject which invokes all change notifications on the UI thread
(+) Added FocusFirstControl behavior for NET35 and NET40
(+) Added ForceCloseAfterSettingDialogResult to WindowLogic and WindowBehavior
(+) added IMessageRecipient.UnsubscribeRecipient to unsubscribe all handlers of a single
    recipient instance at once
(*) WindowLogic and WindowBehavior now support FrameworkElement instead of Window so 3rd party
    classes such as the RadWindow are also supported (not deriving from Window)
(*) All projects are now completely warning free (treat warnings as errors is true)
(*) UIVisualizerService is now more flexible and supports more types, including those not deriving
    from Window (but, for example FrameworkElement)
(*) CanGoBack and CanGoForward are now virtual on the NavigationService
(x) Small fix in DispatcherService.BeginInvoke when no dispatcher is available
(-) Removed FilterTextBox for NET35 and NET40

Fixed since beta 3:
===================
(*) Major refactorings to allow the usage of all classes in WinRT
(x) Fixed issue where the use of the NavigationService would thrown an exception while retrieving the
    "Instances" of the DynamicEventListener class

Fixed since beta 2:
===================
(+) Added caching to all reflection by default to improve overall performance
(*) BREAKING CHANGE: Moved TypeHelper to 'Catel.Reflection' namespace
(*) BREAKING CHANGE: Moved AttributeHelper to 'Catel.Reflection' namespace
(*) Marked ReflectionExtensions as obsolete, use TypeExtensions in Catel.Reflection instead
(*) Moved all reflection code to TypeExtensions. This way, a caching mechanism or multiple platform support
    can be added very easily
(*) If EventToCommand.DisableAssociatedObjectOnCannotExecute is null or false, it will never touch the IsEnabled
    property of the associated object so it can be bound to other properties / values
(*) Updated Ninject support to 3.0
(*) Updated Castle.Windsor support to 3.0
(*) Updated FluentValidation support to 3.3.1
(x) Fixed rare issue where managed view models executing a command would cause issues on interested view models
    in a lower layer (direct childs)

Fixed since beta 1:
===================
(+) Added RoutedEventTrigger to allow the subscription of routed or attached events for event triggers
(+) Added LogicBase.TargetControlPropertyChanged so it is possible to get a PropertyChanged event on all views
    and behaviors, even in SL and WP7
(x) Fixed issue in NavigationService for Silverlight where it would throw exception when it could not find the
    main window of the application
(x) Bug fix in WarningAndErrorValidator where it would not accept multiple errors on the same property

Added/fixed:
============
(+) Added Environment.RegisterDefaultViewModelServices to allow services to be registered before any view model is
    actually instantiated (normally, the first instantiated view model automatically registers all services)
(+) Added INavigationService.CloseApplication to allow the closing of an application via services. The closing can
    also be prevented via the INavigationService.ApplicationClosing event
(+) Added a MessageBase class which makes it easier to send messages with data using the MessageMediator
(+) Added IView interface to easily retrieve information (such as a view model) from a view
(+) Added INotifyableViewModel interface so 3rd party view models can also use the InterestedIn attribute notifications
(+) Added IRelationalViewModel interface so 3rd party view models can also be used in nested user control scenarios
(+) Added IViewModelFactory so the instantiation of view models can now be fully controlled and customized
(+) Added Description property to IMementoSupport to allow a description to the end-user for memento classes
(*) The IOpenFileService now supports multiple files and in WPF it also supports a title
(*) Setting the owner window in WPF now uses the active window instead of the main process window, which should give
    a better behavior when using multiple child windows. This behavior also has impact on the IPleaseWaitService,
    IMessageService and IUIVisualizerService
(*) InfoBarMessageControl.IsTabStop is now false by default
(*) Major performance improvements in TypeHelper.InitializeTypes
(*) Updated System.Windows.Interactivity.dll for SL5
(*) IEditableObject implementation is more flexible now, and allows control using the OnBeginEdit method on DataObjectBase
    and ViewModelBase to prevent it
(x) Fixed issue that views and view models could not be resolved when a naming convention contained 2 or more [UP]
    constants
(x) Fixed issue where the ExposeAttribute did not work correctly
(x) Fixed issue where a view model during design time did not work correctly in the binding editor of VS2010
(x) Fixed issue where in some cases, the IOpenFileService and ISaveFileService would not correctly select the initial
    directory when opening

To-do:
======
See http://catel.codeplex.com/workitem/list/basic

Known issues:
===========
See http://catel.codeplex.com/workitem/list/basic

**********************************************************

===========
Version 3.1
===========

Release date:
=============
2012/05/06

Added/fixed:
============
(+) Added OnDataContextChanged and OnPropertyChanged to UserControl, DataWindow, Page and PhoneApplicationPage
(+) Added DependencyPropertyHelper and DependencyPropertyChangedHelper to allow subscribtion to dependency property
    change events, even in Silverlight and WP7
(+) Added Silverlight and WP7 support for ViewToViewModel attributes
(+) Added TabControl for WPF that will not unload the tab items from the visual tree when a tab is deselected
(+) Added AsynchronousCommand which allows async command execution that does not block the UI thread
(+) Added WatermarkTextBox for WPF
(+) Added FilterTextBox for WPF
(+) Added Memento pattern implementation (undo/redo support for objects and collections)
(+) Added OnModelPropertyChanged method to ViewModelBase to easily get model change notifications without having
    to care about event subscription/unsubscription and memory leaks
(+) It is now possible to determine the view model type for a view based on the datacontext value at runtime
(+) It is now possible to instantiate view models manually based on the current datacontext value at runtime, this
    method is even more flexible and gives more controle than the GetViewModelType() method on the view. This method
    allows to re-use view model instances in multiple different views
(+) Added Tag property to ILog interface which is the type name by default. However, this tag can be customized to 
    categorize the logging
(*) UserControlLogic now wraps the user control in a grid which will contain the ViewModel as DataContext. This way,
    the logic is made much easier and more stable, and saves lots of performance and other enhancements
(*) Extended ValidationContext with HasWarnings and HasErrors properties, as well as with GetWarnings
    and GetErrors methods
(*) IEditableObject is now implemented explicit on the DataObjectBase, as well as some IDataObjectBase members
    that are rarely required
(*) IViewModelContainer for Silverlight must also implement PropertyChanged (which is possible using the helper class 
    named DependencyPropertyChangedHelper) to allow ViewToViewModelAttributes to work in SL
(*) Postfixes in naming conventions are handled a bit better (only the exact postfix is removed, not anything that comes
    after that)
(*) UserControl now has a DefaultSkipSearchingForInfoBarMessageControlValue to set application wide behavior for the
    SkipSearchingForInfoBarMessageControlValue property
(*) Improvements to DeferValidationUntilFirstSaveCall where it now hides the validation results (thus validation will
    continue). This way, it is possible to query validations via the ValidationContext, but still provide UX where the
    user must save the object at least once before validation results show up in the user interface
(*) When an expose attribute is used on a view model in WPF, the dynamically created type descriptor now calls the property
    on the view model instead of a direct call to SetValue / GetValue
(*) DoubleClickToCommand in WPF now uses AddHandler and RemoveHandler to allow double click events even when the control
    marks the routed event as handled
(*) Several performance improvements
(*) It is no longer required to call the base when overriding ViewModelBase.Close 
(x) Fix where custom default action would not be handled on a key press (enter) by the DataWindow
(x) Fixed all binding errors in the UserControl in nested user controls scenarios
(x) Fixed bug in CollectionHelper where 2 different collections containing the same object reference would cause
    an endless while loop
(x) Fixed issue in DispatcherHelper where it would always return the dispatcher of the current thread instead of the
    main application dispatcher. Now it returns the application (main UI) thread dispatcher
(x) Fixed issue where SaveViewModel was not called when a user control was unloaded

To-do:
======
See http://catel.codeplex.com/workitem/list/basic

Known issues:
===========
See http://catel.codeplex.com/workitem/list/basic

**********************************************************

===========
Version 3.0
===========

Release date:
=============
2012/03/18

Added/fixed:
============
(+) Added non-generic UserControl with same behavior as UserControl<TViewModel>
(+) Added non-generic DataWindow with same behavior as DataWindow<TViewModel>
(+) Added non-generic Page with same behavior as Page<TViewModel>
(+) Added non-generic PhoneApplicationPage with same behavior as PhoneApplicationPage<TViewModel>
(+) Added several collection extensions (MoveItemUp, MoveItemUpByIndex, MoveItemDown, MoveItemDownByIndex)
(+) Added ViewHelper to instantiate views with a specific DataContext which can be either via injection
    or by setting the DataContext manually (all wrapped up in 1 method)
(+) IUIVisualizerService and INavigationService can now resolve views based on view model without
    actually instantiating them
(+) Added indent options to ILog interface (and implementation)
(+) Added HideValidationResults property to DataObjectBase so the validation does occur, but the validation
    results will not be exposed through the error interfaces such as IDataErrorInfo
(+) Added additional methods to the Argument class
(+) Added additional methods to the TypeHelper class to retrieve all information about a type
(+) Improved naming convention so it supports the [UP] constant to use relative naming conventions in the 
    UIVisualizerService and ViewModelLocator
(+) Added PreventInvocationIfAssociatedObjectIsDisabled property so the EventToCommand trigger can work, even 
    when the AssociatedObject is disabled
(+) Added IDispatcherService to invoke methods using the dispatcher. The Dispatcher property on the ViewModelBase
    is now marked obsolete, use the IDispatcherService instead
(+) Added Modifiers property to EventToCommand to allow a modifier to be used in combination with an event
(+) Added CommandParameter to the DoubleClickToCommand behavior
(+) Added PleaseWaitService for Windows Phone 7
(+) Added tombstoning methods to the PhoneApplicationPage to allow custom view tombstoning logic
(*) BREAKING CHANGE: the DataWindow now only supports MVVM and cannot be used in its old form
(*) BREAKING CHANGE: moved ObservableCollection extensions to new namespace (Catel.Collections)
(*) BREAKING CHANGE: UIVisualizerService no longer registers types automatically. Views must be registered
    manually or follow one of the (can be customized) naming conventions
(*) BREAKING CHANGE: NavigationService no longer registers types automatically. Views must be registered
    manually or follow one of the (can be customized) naming conventions
(*) BREAKING CHANGE: WeakEventListener methods for PropertyChanged and CollectionChanged have changed and are
    now available without specifying the event name
(*) BREAKING CHANGE: Removed ViewModelBaseWithoutServices, there is now only a ViewModelBase
(*) BREAKING CHANGE: Simplified lots of calls to services. An example is the IMessageService, of which lots of overloads
    are removed and default parameter values are introduced. This gives a better understanding of what a method does and
    this way you don't get lost in all the available methods
(*) BREAKING CHANGE: Created separate assemblies of the Gyroscope and Compass services for Windows Phone 7 so older
    devices are supported out of the box as well
(*) Simplified the StackGrid by letting it derive from the Grid control directly
(*) All obsolete validation calls in the DataObjectBase (and thus ViewModelBase) now caused compiler errors and
    will be removed in the next version
(*) DeferValidationUntilFirstSaveCall now uses the HideValidationResults instead of SuspendValidation (so validation will
    be executed and available via the ValidationContext, but not exposed via the data error interfaces)
(*) WarningAndErrorValidor (used by InfoBarMessageControl) now also checks whether the source is a IDataObjectBase. If 
    so, it uses the ValidationContext to show the errors and warnigns. This allows the display of multiple business
    rules at once or multiple validation errors for the same field
(*) When a nested child view model fails to save (returns false), the parent view model will no longer save itself (thus the
    whole chain will no longer save when a child cannot save)
(*) Added cache behavior to ValidatorProviderBase. This allows that every class that inherits from 
    ValidatorProviderBase use it by default.
(*) All .NET assemblies now target the client framework instead of the full framework. The assemblies can still be used
    by projects using the full framework.
(x) Fixed issue in MessageMediator that it would not register more recipients for the same message
(x) Fixed issue that an automatically centered DataWindow in silverlight was centered again after being repositioned
(x) Fixed issue where the IsDirty property of the DataObjectBase would be set even when it was not dirty
(x) Fixed issue where the TypeHelper would always initialize types and did not respect the "do not force" option
(x) Fixed issue where a collection of non-serialized objects would still be marked as serialized
(x) Fixed some issues with navigation on WP7 (when using the back button, the navigation events were not invoked)
(x) Fixed issue where pressing escape on the DataWindow when it was not shown with the ShowDialog method would cause
    an exception

To-do:
======
See http://catel.codeplex.com/workitem/list/basic

Known issues:
===========
See http://catel.codeplex.com/workitem/list/basic

**********************************************************

===========
Version 2.5
===========

Release date:
=============
2012/01/23

Added/fixed:
============
(+) Added MessageMediator that implements the Mediator pattern
(+) Added IValidationSummary to get an easy summary of a IValidationContext
(+) Added ValidationToViewModel attribute to easily get validation summaries mapped onto properties of a view model
(+) Added ViewModel extensions to retrieve a IValidationSummary that includes all child view models as well
(+) Added CommandHelper that allows to automatically hook a command CanExecute to an IValidationSummary
(+) Added SelectTextOnFocus behavior
(+) Added GetBindingExpression extension method for DependencyObject in Silverlight to allow the retrieval of
    bindings for non-FrameworkElement types that still do support bindings (such as behaviors and dependency objects)
(+) Added IsAssociatedObjectLoaded to BehaviorBase, TriggerBase and TriggerActionBase
(+) Added DeferValidationUntilFirstSaveCall to defer the validation until the first call to SaveViewModel
(+) Added OnViewModelClosed methods to UserControl<TViewModel> and DataWindow<TViewModel>
(+) Added caching to the ExpressionHelper to improve the performance on lambda expression parsing
(+) Added nested view models validation summaries to allow the retrieval of a validation summary from a view model tree
(*) WeakEventListener now also supports PropertyChangedEventHandler and NotifyCollectionChangedEventHandler
(*) WeakEventListener now has convenience classes that automatically detects the types required so an event
    can be subscribed like WeakEventListener.SubscribeToWeakPropertyChangedEvent(target, source, "MyEvent", MyHandler)
(*) When ViewModelBase.ValidateModelsOnInitialization is set to false, properties decorated with the ViewModelToModel
    attribute are notlonger validated on model changes
(*) Small improvement in DependencyObjectExtensions.FindVisualDescendant where it will always loop the children when
    the control is unknown instead of only with a panel
(*) ViewModelBaseWithoutService now also unsubscribes itself as life instance as soon as it is closed
(*) IViewModel now has a UniqueIdentifier property which is a counter. This way, the uniqueness of a view model is no
    longer determined by its creation time (because in some very rare situations, the creation time of several view
    models was equal)
(*) PropertyHelper now caches reflection results for better performance
(*) Project template for WPF application now starts the main window maximized
(*) ViewModelToModel attribute now has a Mode property to specify the mapping mode
(*) Improved the way models are uninitialized and initialized again when decorated with Model attribute
(*) BREAKING CHANGE: Removed IsReadonly from Expose attribute, replaced by Mode property
(*) BREAKING CHANGE: non-static PropertyData definitions are no longer allowed (would destroy serializations, and this
    is actually not allowed anyway)
(*) BREAKING CHANGE: Validation methods now use interfaces instead of classes
(*) FrameworkElement.GetParent extension method now also uses VisualTreeHelper.GetParent
(*) DataWindow in WPF now first focuses the default button before handling it to make sure all bindings are updated
(*) WrapControlHelper is now public so it can be used by other classes as well
(-) BREAKING CHANGE: Removed IDisposable from IViewModel and IDataObjectBase, objects no longer need to be disposed
(-) Removed RetrySafetyCounter
(x) Fixed issue where OnNavigationCompleted was not invoked when the back button was
    used in navigation based applications
(x) Added event keyword to MVVMBehaviorBase.ViewModelChanged and MVVMBehaviorBase.ViewModelPropertyChanged
(x) Fixed issue that a view model would still map properties from view model to model when the view model was already
    closed. This could lead to unexpected model updates if controls are written badly (and some 3rd party are)
(x) Fixed issue where in VB.NET, the default value delegate was not working for property registrations. If a value is
    passed as a delegate and does not return void, it will be casted to a function at all times
(x) Fixed issue that if a model object would call RaisePropertyChanged(null), the DataObjectBase would cause an error
(x) Small theme fixes that no longer uses sets the content of buttons using RoutedUICommands. This is a small performance
    improvement and also solves a missing binding issue on the GrayScaleEffect for buttons
(x) Fixed issue for Silverlight in case the Deployment.Current.Parts would throw a UnauthorizedAccessException
(x) Fixed issue that reflection in Catel did not use the successfully loaded types in case of a ReflectionTypeLoadException
(x) Constructor for AuditorBase is no longer internal
(x) Fixed issue where the Nested User Controls would construct a view model twice for the same model
(x) Fixed issue with automatic tombstoning, added additional logging and checks

To-do:
======
See http://catel.codeplex.com/workitem/list/basic

Known issues:
===========
See http://catel.codeplex.com/workitem/list/basic

**********************************************************

===========
Version 2.4
===========

Release date:
=============
2011/12/06

Added/fixed:
============
(+) Added Authentication behavior that allows easy disabling, hiding or collapsing of
    UI elements based on the runtime result of IAuthenticationProvider
(+) PleaseWaitService in both Silverlight and WPF now support determinate modes besides
    indeterminate mode
(+) Added OnDataContextChanged method to UserControl<TViewModel> in Silverlight
(+) Added ViewModelPropertyChanged event to IViewModelContainer so it is no longer required
    to subscribe/unsubscribe to the view model itself in parent view model containers if
    your are only interested in property changes of the view model
(+) Added IsLoaded property to UserControl<TViewModel> and the behavior in Silverlight
(+) Added DelayedBindingUpdate behavior
(+) Added DynamicEventListener to be able to subscribe to dynamic unknown events
(+) Added the possibility to inject an Action into the DoubleClickToCommand behavior to allow
    the execution of a delegate when the behavior is created via code
(+) Added LogManager.GetCurrentClassLogger() to simplify the retrieval of the logger for the 
    current class
(+) DataWindow in Silverlight now supports IsDefault and IsCancel by handling the KeyUp for Enter
    and Escape
(+) Added Focus behavior to set focus via a behavior
(+) Added KeyPressToCommand behavior
(+) Added Argument.IsSupported check which throws a NotSupportedException if not supported
(+) Added SafeInvoke support for INotifyPropertyChanged and INotifyCollectionChanged
(+) Added WeakEventListener to easily subscribe to long living instances without causing memory leaks
(+) Added ILog.ErrorAndThrowException<TException> convenience method to log and throw an exception at
    the same time
(+) Added IValidator and IValidatorProvider to support external validators
(+) Added IValidationContext to retrieve all validation results of an object
(*) Changed default value of enabled state in Silverlight for non-Control UI elements
    (such as Grid) to true instead of false (fixes a bug where EventToCommand would
    not work for a grid)
(*) BREAKING CHANGE: renamed ICommandAuthenticationProvider to IAuthenticationProvider
(*) BREAKING CHANGE: overload of constructor with dictionary of services is no longer available
(*) BREAKING CHANGE: ControlToViewModelAttribute is now called ViewToViewModelAttribute
    overloads with a custom IServiceLocator are now available which is a much better way
(*) BREAKING CHANGE: log classes are no longer protected but private so each class has it's own logger
    and it is easier to see what logging comes from what class
(*) Enabled automatic tombstoning for WP7
(*) Improved DoubleClickToEvent trigger so it behaves better in a ListBox with a custom ItemTemplate
(*) All controls now load resources at runtime so it is possible to change a new UI culture for
    Catel at runtime
(*) DataWindow now has it's own styles to the styles can be changed more easily, see 
    DataWindow.generic.xaml. Also built in protection if a derived class of the DataWindow also 
    changes the content in OnContentChanged
(*) Window logic is a bit more generic so it also supports third party windows
(*) TypeHelper has some small performance improvements for TypeHelper.GetTypeByAssembly
(*) Catel now skips the validation of attributes on view models the first time. This is very useful when
    properties are decorated with the [Required] attribute and you don't want the errors to show up
    immediately. If you want this behavior, simple make a call to Validate(true, false) in the view model
    and the view model will be forced to load the errors
(*) Improvements to .NET version so all models with data annotations are validated (previously, only SL4
    models of type Entity were validated)
(*) LogManager no longer registers the DebugLogListener for performance reasons. The log listener can be
    added manually or by using the LogManager.RegisterDebugListener() method
(*) It is now possible to enable/disable specific log events per listener
(*) It is now possible to disable Catel logging but let other log classes still write output
(*) StyleManager now accepts a custom prefix in case default styles must be customized
(x) Fixed issue where the same view model with the exact same property values was not recognized
    as a different instance of the view model. Now the uniqueness of a view model is determined 
    by the view model construction time and the type of the view model
(x) Fixed issue where the Command property in the DoubleClickToCommand could not be null, but this
    might be possible at the initialization of the view (thus the check is removed)
(x) Fixed issue where a star (*) column definition in the StackGrid would not fill up the space
(x) Fixed issue where the designer for Windows Phone 7 Mango applications would not show up with
    a message that IDataErrorInfo could not be found
(x) Fixed issue in DataObjectBase where it did not correctly de-serialize the right type in xml when
    using a base class instead of the actual class 
(x) Fixed issue in NavigationPage behavior in Silverlight that the navigation was never completed and the
    arguments were not available (WP7 was working fine)
(x) Fixed issue where ChildWindow (and thus the DataWindow) in Silverlight did not center when shown when
    the browser is not the active window

To-do:
======
See http://catel.codeplex.com/workitem/list/basic

Known issues:
===========
See http://catel.codeplex.com/workitem/list/basic

**********************************************************

===========
Version 2.3
===========

Release date:
=============
2011/10/27

Added/fixed:
============
(+) Added new (non-generic) overloads in ServiceLocator for registering types
(+) WP7 version now supports tombstoning out of the box (automatic view model recovery
    after recovering from tombstoning)
(+) Added support for the Castle Windsor IoC container
(+) Added option to provide a callback as default value for properties defined on the
    DataObjectBase (and thus ViewModelBase) so it is possible to truely set a default
    value for a reference type
(+) Added support to (de)serialize the DataObjectBase to json and back
(+) Added AdvancedPropertyChangedEventArgs which provides the old and new value in case
    of a property change
(+) Added full support for data annotations. For example, if a view model property is decorated
    with the RequiredAttribute, the error is gathered and even provided to the ValidateFields and
    finally exposed via the IDataErrorInfo interface (all validation eventually ends up in one place,
    the IDataErrorInfo)
(*) Only public constructors on view models are now used by the LogicBase
    (before, also private constructors were used, but this doesn't work on
    SL and WP7)
(*) Moved implementation of IXmlSerializable from SavableDataObjectBase to
    DataObjectBase
(*) .NET implementation now uses DataContractSerialization for serializing data to
    xml so the classes can be used in combination with WCF as well
(*) DataWindowButton now only accepts delegates without parameters
(*) Major performance improvements when (de)serializing interfaces via xml
(*) Registered change event handlers using RegisterProperty are no longer called on refresh
    updates (for example, errors changed). This can solve some rare bugs and is a small
    improvement on performance
(x) Fixed a bug where commands defined as ICommand are now also recognized,
    where previously only interfaces or objects implementing ICommand were
    registered
(x) Finally fixed complex xml serialization in Silverlight and WP7
(x) Fixed issue that it was possible to cancel a view model after it was already
    closed. IF a view model is closed, the Save, Cancel and Close no longer handle
    anything
(x) Fixed very rare issue in MefHelper
(x) Fixed issue for xml serialization using DataContractSerializer when collections contain
    interfaces instead of actual types
(x) Fixed issue for xml serialization with more than 3 levels deep using the default
    DataContractSerializer class
(x) Fixed issue with StackGrid being initialized several times in Silverlight
(x) Fixed issue where the WarningAndErrorValidator would clear the Source property when being
    unloaded and causing the InfoBarMessageControl not to show up again
(x) Fixed issue where the UserControlLogic would not update a value when it is initially null
    in a master/detail scenario
(x) Fixed EventToCommand issues with Windows Phone 7 Mango
(x) Fixed issue where the UserControl<TViewModel> prevented a datacontext change to be successful
    in case when the initial datacontext value was null
(-) Removed LLBLGen support (was deprecated anyway)

To-do:
======
See http://catel.codeplex.com/workitem/list/basic

Known issues:
===========
See http://catel.codeplex.com/workitem/list/basic

**********************************************************

===========
Version 2.2
===========

Release date:
=============
2011/10/02

Added/fixed:
============
(+) Added PropertyHelper.IsPropertyAvailable
(+) Added OnViewModelEvent so the InterestedIn attribute also provides events of
    other view models the current view mode is interested in
(+) All controls with generic view models (UserControl<TViewModel>, etc) now have a
    method OnViewModelPropertyChanged so it is very easy to track view model changes
(+) Aded ExposeAttribute for WPF which allows even easier exposing of model properties
    in a view model simply by decorating a model property with the ExposeAttribute
(+) Added EffectsHelper class that is able to dimm and blur a FrameworkElement. The new
    default mode of the PleaseWaitWindow is Blur
(+) Added Argument.IsNotNullOrEmptyArray() method
(+) PropertyHelper now has TrySetPropertyValue and TryGetPropertyValue
(+) Added support for WPF 4.5
(+) Added support for Ninject as external IoC container
(+) Added MouseInfo behavior (very useful for Silverlight which is missing IsMouseOver)
(+) Added NumericTextBox behavior
(*) Moved controls and windows from Catel.Windows to Catel.Windows.Toolkit to
    separate the additional controls from the MVVM toolkit. This also saves some
    space on the other assemblies (silverlight, WP7) because some images are no
    longer required
(*) Catel now logs all tracing to the console for Silverlight applications
(*) DataObjectBase has now a more object oriented approach for validation. Instead of
    calling SetFieldError and SetBusinessRuleError, simple override the validate methods
    which provide a list of validation results. This way, validation could be completely
    separated from the DataObjectBase and re-used
(*) log4net is replaced by a more generic logging solution
(*) Minimized number of times a dictionary is accessed for the same item, as well as changed
    all event handlers to a thread-safe invocation manner
(*) Item templates now use $viewname$Model. This way, if a CustomerView is created, it will
    automatically be linked to CustomerViewModel instead of CustomerViewViewModel
(*) IMessageService now also supports callbacks in case custom message boxes are used
(x) DataWindow margin in Silverlight is finally fixed by customize the style of the ChildWindow
    template and setting it manually (but it is still possible to override the styles)
(x) All issues with the InfoBarMessageBar in Silverlight are now solved
(x) Argument.IsOutOfRange, Argument.IsMaximum and Argument.IsMinimum now also work on WP7 (which
    by default is not able to compile binary expressions)
(-) Removed Security.Cryptography.CryptHelper
(-) Removed Catel.Reflection.PropertySorter
(-) Removed Catel.IO.File, Catel.IO.FileWatcher and Catel.IO.Directory

To-do:
======
See http://catel.codeplex.com/workitem/list/basic

Known issues:
===========
See http://catel.codeplex.com/workitem/list/basic

**********************************************************

===========
Version 2.1
===========

Release date:
=============
2011/09/13

Added/fixed:
============
(+) Added FrameworkElementExtensions.FixUILanguageBug() to fix the Silverlight
    UI language bug (for example, the dollar sign is used by SL instead of the
    euro sign in euro countries, this fix solves that)
(+) Added support for MEF in the ServiceLocator
(+) Added support for INotifyDataErrorInfo for models in the ViewModelBase
(+) Added InitializeViewModel() to IViewModel that is called as soon as an associated
    UI element (usercontrol, window, ...) is loaded. This way, it is possible to delay
    the retrieval of data until the element is actually loaded. Override Initialize()
    on the ViewModelBase to use this behavior
(+) Added extension method ObservableCollection.ReplaceRange() which clears the collection
    and adds the specified range to the collection again
(+) Added IUIVisualizerService.NamingConventions so multiple naming conventions are available
(+) Added ExpressionHelper to keep the parsing of Expression objects (for example, for property
    names) in a single place
(+) UpdatedBindingOnTextChanged behavior now supports a delay so the command will not immediately
    be executed after every text change event, but only when no new text change event occurs for
    the specified delay
(+) Properties decorated with the [Model] attribute and of type Entity (EF) are now automatically
    validated in front so the errors are known/visible immediately
(+) Extended Argument class with IsOfType and IsNotOfType method and an overload for the 
    ImplementsInterface method which accepts an instance to check
(+) Added ObservableObject, which extracts some logic out of the immensive DataObjectBase and makes it
    easy to implement lightweight objects that support INotifyPropertyChanging and INotifyPropertyChanged
(+) Added Enum<TEnum>.ConvertFromOtherEnumValue to easily translate equal enum values from different
    enum types
(+) Added PhoneApplicationPageBehavior in addition to all other MVVM behaviors
(+) Added CameraService for Windows Phone 7 Mango
(+) Added interfaces to UserControl<TViewModel>, DataWindow<TViewModel> and Page<TViewModel> so it
    is now very easy to cast generic controls to an interface to change properties
(+) UserControl<TViewModel> and DataWindow<TViewModel> now have an OnViewModelChanged method to save
    a developer to subscribe/unsubscribe on the same user control or window
(*) IUIVisualizerService.NamingConvention is now marked obsolete (use NamingConventions
    instead)
(*) Additional instances of IExternalContainerHelper classes can now be added to the
    ServiceLocator so it is easy to extend the supported external IoC containers at
    runtime
(*) INotifyDataErrorInfo implementation in the DataObjectBase now returns all business
    rule errors when string.Empty or null is passed in the GetErrors method
(*) Designer class which initialized the design time view model is marked obsolete, it
    is recommended to use the d:DataContext instead
(*) PleaseWaitWindow now dimms all the windows instead of only the owner. This in case multiple
    non-dialog windows are shown. To disable this new behavior, simply set the property 
    PleaseWaitWindow.OnlyDimmOwnerWindow to true
(*) IPleaseWaitService implementation for Silverlight now always centers the busy indicator correctly
    and sets the IsHitTestVisible to false when the busy indicator is visible
(*) Behaviors and triggers are improved so that they work even when the associated object is unloaded
    and loaded several times for the same instance
(*) ViewModelBase.OnNavigationCompleted is only invoked when there is a NavigationContext (previously,
    the method was called twice)
(*) Improved INavigationService so Uri's can be registered directly
(*) Commands registered as ICommand are now also re-evaluated automatically for a view model. Previously,
    only ICatelCommand implementations were re-evaluated
(*) Small improvements to Command so Execute and CanExecute without parameters are possible
(*) DataObjectBase.AlwaysInvokeNotifyChanged is now set to false by default
(*) ViewModelBase.UpdateNavigationContext is now public to allow unit testing injection for navigation
    based pages and controls
(*) Updated SL5 project to Silverlight 5 RC
(*) When a view model is set on a control which is already loaded, the InitializeViewModel is automatically 
    called immediately so it is garantueed to be called
(*) When a view model is set as the DataContext of a control, it will be used as the view model for that 
    control so all the events are correctly called (this allows manual setting of the view model)
(x) Fixed issue where the UserControlLogic would not subscribe to an existing DataContext
(x) Fixed issue where design-time view models in Silverlight threw an error with
    "XmlnsDeclaration references a namespace 'Catel.Windows.Input' that is not 
    in the assembly"
(x) If a SL4 assembly does not contain an AppManifest.xaml, it caused an exception in
    AssemblyHelper.RegisterAssembliesFromXap. Added additional try/catch to prevent this
(x) Dispatcher for SL4 is now retrieved from the current deployment if there is no current application
    which might be possible in case of unit tests. Determining of the current dispatcher is moved
    to the DispatcherHelper class
(x) Fixed issue where the EventToCommand would not work on a user control that is loaded/unloaded several
    times after eachother

To-do:
======
See http://catel.codeplex.com/workitem/list/basic

Known issues:
===========
See http://catel.codeplex.com/workitem/list/basic

**********************************************************

===========
Version 2.0
===========

Release date:
=============
2011/08/04

Added/fixed:
============
(+) Added support for Windows Phone 7 Mango
(+) Added MVVM services for the following WP7 capabilities:
    * Accelerometer
    * Compass
    * Gyroscope
    * Vibration
(+) Added behavior for UserControl<TViewModel>, DataWindow<TViewModel> and Page<TViewModel>
    so it is no longer required to derive from these classes to get the same behavior
(+) Added support for auditing and analytics
(+) Added support for data annotations, all registered properties on DataObjectBase 
    and ViewModelBase can now be decorated with data annotation attributes
(+) Added RaisePropertyChanged as alternative for OnPropertyChanged for the developers
    that prefer it. Internally it still uses OnPropertyChanged. Also added type-safe way
    to call the method: RaisePropertyChanged(() => MyProperty)
(+) Added CloseViewModelOnUnloaded to UserControl<TViewModel>. If set to false, the control
    will not close the view model and re-use it the next time
(+) IPleaseWaitService now implements Pop and Push to allow multiple view models to use the
    same please wait service without flickering. Each view model should Push when beginning
    and Pop when ending an action. If the last view model calls Pop, the please wait window
    is hidden
(+) Added IPleaseWaitService support for Silverlight by using the BusyIndicator
(+) IUIVisualizer now supports naming convention so it is easy to register windows via 
    naming conventions when the Windows do not implement DataWindow<TViewModel>
(+) BREAKING CHANGE: Added new ServiceLocator which also supports unity, but the references
    to unity are no longer required for Catel
(+) Added INavigationService for WPF and Silverlight
(+) Added DoubleClickToCommand and UpdateBindingOnTextChanged interactivity behaviors
(*) BREAKING CHANGE: properties on the EventToCommand implementation for WP7 can now be set
    via direct values and bindings (until now, only bindings were supported). So set a value
    via a direct value, use the [PropertyName]ByValue convention
(*) BREAKING CHANGE: removed all obsolete methods marked obsolete in 1.4
(*) BREAKING CHANGE: EventToCommand has been moved to a new namespace (Catel.Windows.Interactivity)
(*) EventToCommand can now disable the associated object if required in Silverlight and WP7
(*) If a view (such as a dialog) is closed from within a viewmodel, the DialogResult is now
    correctly being set if supported by the view
(*) Command class now accepts Execute and CanExecute methods without a parameter (very useful
    in lots of cases where the parameter is not being used)
(*) Most public methods in the MVVM Services are now marked virtual so it is easy to customize
    an out-of-the-box service implementation
(*) ViewModelBase now only registers services in the ServiceLocator when they are not already
    registered. This allows customization of the ServiceLocator before viewmodels are actually
    instantiated
(*) It's now possible to add assemblies from a Xap file to AssemblyHelper.RegisterAssembliesFromXap
    so AssemblyHelper.GetLoadedAssemblies() also includes dynamically loaded xap assemblies
(*) ViewModelServiceManager is now deleted. Injected services in ViewModelBase always take precedence
    over services registered in the ServiceLocator. Since the ServiceLocator fully takes care of 
    caching, the ViewModelServiceManager is no longer required
(*) DataObjectBase.InitializeProperty is now protected instead of private to enable dynamic property
    registeration and initialization
(*) DataObjectBase.SetFieldError() now has an override that accepts an expression so it can be written
    as SetFieldError(() => IsDirty, "IsDirty has a field error");
(*) Catel.Environment now has a property to check whether a view is in design mode or not (the default
    DesignerProperties.GetIsInDesignMode does not seem to work in all cases)
(*) All controls are now available via the namespace xmlns:catel="http://catel.codeplex.com"
(x) Fixed generic theme references in .NET 4.0
(x) Fixed issue with operator == on DataObjectBase, it is now thread-safe
(x) Fixed issue that if a UserControl<TViewModel> was put on a DataWindow<TViewModel> in
    Silverlight, the application would crash saying the child already had a parent
(x) DataWindow<TViewModel> can now be designed by Visual Studio designer and blend
(x) ISaveFileService and IOpenFileService now actually work for Silverlight (return stream)

To-do:
======
See http://catel.codeplex.com/workitem/list/basic

Known issues:
===========
See http://catel.codeplex.com/workitem/list/basic

**********************************************************

===========
Version 1.4
===========

Release date:
=============
2011/05/24

Added/fixed:
============
(+) Added support for Windows Phone 7 and Silverlight 5 (beta)
(+) Added support for complex and nested (de)serialization of SavableDataObjectBase
    for Silverlight and Windows Phone 7 (WPF already had this implemented)
(+) Added support for the ControlToViewModelMapping attribute in Silverlight and
    WP7 (ViewModel to Control only)
(+) Added ICommandAuthenticationProvider so it is possible to add role or other 
    authentication methods to MVVM commands    
(+) Added ViewModelBase.OnViewModelCommandExecuted to be able to be notified when
    an interested view-model has executed a command
(+) Added Argument class to validate arguments easily and log and throw exceptions when
    an argument does not meet a specific condition
(+) Added support for INotifyDataErrorInfo and INotifyDataWarningInfo in DataObjectBase
    and thus also the ViewModelBase
(*) BREAKING CHANGE: EventToCommand trigger is now located in the Catel.MVVM namespace
    instead of the Catel.MVVM.Commands namespace to match the other command classes
(*) BREAKING CHANGE: Simplified the IViewModel interface so all methods now have a 
    'ViewModel' postfix so the actual methods on the ViewModelBaseWithoutService 
    does not have to be casted explicitly to an IViewModel instance
(*) BREAKING CHANGE: IViewModel.Initialize is now obsolete and logic can now be 
    implemented in the constructor of the view-model. The next version will actually 
    remove the call and break the build if it is still used
(*) DataObjectBase serialization now uses a custom KeyValuePair object called 
    PropertyValue to (de)serialize property values because KeyValuePair is not
    serializable in Silverlight and Windows Phone 7
(*) EmptyRow and EmptyColumn for StackGrid are no longer focusable by default
(*) EventToCommand trigger is now compatible with Windows Phone 7
(*) Command implementation now double checks whether execution of a command is 
    allowed before calling Execute because some controls directly call Execute
    without checking CanExecute
(*) ViewModelBase now flattens hierarchy for view-models to allow deriving of 
    view-models, which is very useful for designer purposes
(*) View-model services are now only instantiated when really needed (lazy loading)
(*) UserControl.Loaded event does not garantuee a visual tree, so a call to ApplyTemplate
    is added in the Silverlight implementation of the UserControl<TViewModel> to garantuee
    a visual tree in the user control. Same for DataWindow and PhoneApplicationPage
(*) Renamed all projects so they include the version of the target framework, such as
    Catel.SL4 and Catel.SL5 instead of Catel.Silverlight
(x) Fixed bug in UserControl<TViewModel> in very rare situations that the old
    view-model was not correctly removed as datacontext. Also made the class implementation
    much easier to understand (but this doesn't make the material itself easy)
(x) Fixed issue where view-models without properties were equal and thus never overwritten
    in a SetValue call on the DataObjectBase

To-do:
======
See http://catel.codeplex.com/workitem/list/basic

Known issues:
===========
See http://catel.codeplex.com/workitem/list/basic

**********************************************************

===========
Version 1.3
===========

Release date:
=============
2011/03/18

Added/fixed:
============
(+) Added BindingHelper class to evaluate binding values manually
(+) UserControl<TViewModel> now supports master-detail views where the detail
    view would have a nested UserControl<TViewModel> and no parent in the whole
    tree had a valid binding to a data context (pfew, this was a tough one...)
(+) Project and item templates are now installed when Catel is added to a project
    via NuGet as well. Code snippets are now initialized during every startup
    of every project that includes Catel, so if the package is removed from a
    project, not all projects lose their code-snippets
(+) Design time view models as example data are now supported by Catel via 
    the Designer.ViewModel attached property
(*) ViewModelBase will no longer throw an exception when a property cannot
    be found on the model. This is because when an interface is used, the
    property is not detected via reflection when FlattenHierarchy is used
(*) DataWindow and DataWindow<TViewModel> are no longer abstract to support designer 
    view
(*) InfoBarMessageControl uses custom events instead of routed events so the control
    works with Silverlight as well. This requires that all non-standard validation
    now uses a WarningAndErrorValidation definition (which is already the case for the
    DataWindow and UserControl). However, if you cannot live with these changes, you
    can uncomment the USE_ROUTED_EVENTS defines in both InfoBarMessageControl.cs and 
    WarningAndErrorValidator.cs
(-) Removed default offset in DataWindow so it can be displayed in maximized
    state as well. If you want to want to use the old offset, simply call 
    DataWindow.EnableWindowOffset() or set the MaxWidth and MaxHeight properties
(-) Removed Jetpack theme because it was not working and required a reference to
    the WPFToolkit
(x) Fixed issue with the UserControl item template for WPF
	
To-do:
======
-

Known issues:
===========
-

**********************************************************

===========
Version 1.2
===========

Release date:
=============
2011/02/17

Added/fixed:
============
(+) DataObjectBase now supports Isolated Storage out of the box: 
    Person.Save(myStream) stores a whole object graph in Silverlight
(+) DataObjectBase can now be converted to Json via Person.ToJson();
(+) UserControl<TViewModel> can now automatically disable itself when there
    is no view model constructed via the DisabledWhenNoViewModel property
(+) InfoBarMessageControl now contains a Mode property so it is possible to
    show the control either Inline or Overlay, DataWindow also has overloads
    to specify this option
(*) Added protection that a view model can only be initialized once
(x) Silverlight Commands are now correctly cleaned up without exceptions
(x) Fixed bug in SavableDataObjectBase.ToXml()
(x) ViewModelBase will no longer get into an undefined state after the model 
    becomes null because of the SelectedItem property of an ItemsControl

To-do:
======
-

Known issues:
===========
-

**********************************************************

===========
Version 1.1
===========

Release date:
=============
2011/01/26

Added/fixed:
============
(+) Styles can now be changed dynamically, see Examples application for a how-to
(+) ViewModelBase class now have a constructor that allows services injection
(+) ViewModelBase services can now be configured by IoC (via Microsoft.Unity)
(+) All ViewModelBase services now have a unit test implementation
(+) Added IProcessService to run processes from a viewmodel with directly using
    the process class (which makes it easier to unit test view models)
(*) If the HasErrors property of DataObjectBase is used, and the object is not
    yet validated, it will be validated automatically so the HasErrors is actually
    correct as initial state
(*) It is now possible to add buttons to the DataWindow via the AddCustomButton method
(*) Text on InfoBarMessageControl can now be customized
(*) UserControl<TViewModel> is no longer abstract to support design mode in WPF
(*) DataWindow<TViewModel> now uses Dispatcher.BeginInvoke to initialize the view model
    instead of calling it directly so the window can initialize and update itself before
    long-duration view model initialization. For example, the window doesn't become black
    when a messagebox is shown during initialization
(*) PleaseWaitHelper no longer re-uses the same instance of the PleaseWaitWindow, but creates a
    new window every time, works much better
(x) Fixed issue that a messagebox during the PleaseWaitWindow show via the IMessageService
    caused the main window to hide to the background
(x) Fixed issue that ICommand implementations were not correctly cleaned up and the CommandManager
    kept invoking On[Command]CanExecute. Now the ICatelCommand implements the IDisposable interface
	and the ViewModelBase class correctly disposes the commands upon closing
(x) Fixed several memory leaks that held view models in memory
(x) WindowExtensions.SetOwnerWindow extension method that uses the process handle to set the owner
    now respects the CenterScreen property of a WPF window
(x) The first focusable control inside the DataWindow is now correctly focused
(x) StackGrid now supports SizeToContent (it doesn't take all space any longer)

To-do:
======
-

Known issues:
===========
-

**********************************************************

===========
Version 1.0
===========

Release date:
=============
2010/12/28

Added/fixed:
============
(*) First stable release

To-do:
======
-

Known issues:
===========
-

**********************************************************
